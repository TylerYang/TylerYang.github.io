<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Promise Land]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="tyleryang.github.io//"/>
  <updated>2015-10-06T09:34:33.000Z</updated>
  <id>tyleryang.github.io//</id>
  
  <author>
    <name><![CDATA[Tyler Yang]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Shortest Palindrome - Leetcode]]></title>
    <link href="tyleryang.github.io/2015/10/06/Shortest-Palindrome-Leetcode/"/>
    <id>tyleryang.github.io/2015/10/06/Shortest-Palindrome-Leetcode/</id>
    <published>2015-10-06T08:43:00.000Z</published>
    <updated>2015-10-06T09:34:33.000Z</updated>
    <content type="html"><![CDATA[<p>已经很久没刷题了，国庆期间重新刷了几题，复习了下 DFA, kmp algorithm, 有向图的环检测, 拓扑排序等。</p>
<p>最近对算法一个感受就是，算法跟英文很像，学的时候总是不知道有什么用，偏偏就会有时候需要用上。 比如有向环的检测跟拓扑排序，学图数据结构跟算法的时候总是觉得这些东西可能在一些比较高大上的东西上才会用到。直到半自己想写一个依赖注入的js 版本实现的时候突然就懵了。 </p>
<p>写个依赖注入在简单的利用function to String 之后利用正则表达式获得各个变量时候的难度都还好，直到检测依赖是否成环的时候，需要用到的便是图里面的有向图的环检测，也就是dfs。</p>
<p>这题<a href="https://leetcode.com/problems/shortest-palindrome/" target="_blank" rel="external">Shortest Palindrome</a> 在leetcode 的通过率为17%，难度为Hard. 个人认为还是比较有意思的题目.</p>
<blockquote>
<p>Given a string S, you are allowed to convert it to a palindrome by adding characters in front of it. Find and return the shortest palindrome you can find by performing this transformation.</p>
<p>For example:<br>Given “aacecaaa”, return “aaacecaaa”.</p>
<p>Given “abcd”, return “dcbabcd”.</p>
</blockquote>
<h3 id="分析">分析</h3><p>刚开始看到这题想法是很简单，以为跟找最长子串匹配应该是同一个解法，也就是动态规划的方法。后面发现跑起来在大数据集的时候还比暴力匹配更慢. </p>
<p>仔细思考了一下后发现最短的回文其实是从头上开始找到后面能匹配的尽可能长的回文子串，举个例子<code>aabcbaaa</code> 能找到从头部开始尽可能长的回文子串为<code>aabcbaa</code>。思路上还是动态规划，却发现无论如何都有很多无用的操作。最后 google 了下，发现最佳的做法（时间复杂度为线性）是kmp 算法。</p>
<p>具体做法为 <code>aabcbaaa</code> + <code>aaabcbaa</code>(前者的逆子串）之后用kmp 的prefix 处理生成next 跳转数组后，找到能match 的最长回文逆子串。比如 对于字符串s(<code>aabcbaaa</code>)先reverse 再concat 之后生成的字符串为str(<code>aabcbaaaaaabcbaa</code>)。 这时候的next 跳转数组应该为</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a  a   b  c  b  a  a  a  a  a  a  b  c  b  a  a&#10;-1  0  -1 -1 -1  0  1  0  1  0  1  2  3  4  5  6</span><br></pre></td></tr></table></figure>
<p>这时候会发现能找到的最长逆子串长度应该为6 + 1 =&gt; 7. 这是只需要new StringBuffer(s.substring(7)).reverse() + s 便为最终解答。</p>
<p>以下为具体的java 实现，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">shortestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) <span class="keyword">return</span> s;</span><br><span class="line">        StringBuffer sBuff = <span class="keyword">new</span> StringBuffer(s);</span><br><span class="line"></span><br><span class="line">        String str = s + sBuff.reverse().toString();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] next = genNext(str);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> l = next[next.length - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l == str.length() - <span class="number">1</span> || l == s.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l &gt; s.length()) &#123;</span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">        l %= s.length();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StringBuffer(s.substring(l)).reverse().toString() + s; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] genNext(String pattern) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] next = <span class="keyword">new</span> <span class="keyword">int</span>[pattern.length()];</span><br><span class="line">        next[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; pattern.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = next[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">while</span>(index &gt;= <span class="number">0</span> &amp;&amp; pattern.charAt(index + <span class="number">1</span>) != pattern.charAt(i)) &#123;</span><br><span class="line">                index = next[index];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(pattern.charAt(index + <span class="number">1</span>) == pattern.charAt(i)) &#123;</span><br><span class="line">                next[i] = index + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                next[i] = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/TylerYang/leetcode/blob/master/214.ShortestPalindrome/Solution.java" target="_blank" rel="external">完整版本</a></p>
<h3 id="总结">总结</h3><p>这题感觉综合性在leetcode 里面算是比较强的。至少让我复习了kmp 这个算法以及dfa 的相关概念。kmp 的prefix 的实现感觉上还是比较tricky，写出伪代码然后去一步步去走才能更深刻的理解。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>已经很久没刷题了，国庆期间重新刷了几题，复习了下 DFA, kmp algorithm, 有向图的环检测, 拓扑排序等。</p>
<p>最近对算法一个感受就是，算法跟英文很像，学的时候总是不知道有什么用，偏偏就会有时候需要用上。 比如有向环的检测跟拓扑排序，学图数据结构跟算]]>
    </summary>
    
      <category term="Finite State Automata" scheme="tyleryang.github.io/tags/Finite-State-Automata/"/>
    
      <category term="KMP Algorithm" scheme="tyleryang.github.io/tags/KMP-Algorithm/"/>
    
      <category term="Leetcode" scheme="tyleryang.github.io/tags/Leetcode/"/>
    
      <category term="Interview" scheme="tyleryang.github.io/categories/Interview/"/>
    
      <category term="Leetcode" scheme="tyleryang.github.io/categories/Interview/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[移动webapp 优化思考 - web]]></title>
    <link href="tyleryang.github.io/2015/09/30/%E7%A7%BB%E5%8A%A8webapp%E5%B7%A5%E7%A8%8B%E6%80%9D%E8%80%83/"/>
    <id>tyleryang.github.io/2015/09/30/移动webapp工程思考/</id>
    <published>2015-09-30T13:57:48.000Z</published>
    <updated>2015-09-30T14:57:20.000Z</updated>
    <content type="html"><![CDATA[<h2 id="起因">起因</h2><p>最近在帮助重写一个移动端h5 架构。说起来这是后话，主要起因是有个基于RequireJS 跟 AngularJS 开发的移动端HTML5 网站。 本身定义为Web Application。接到优化加载时间的需求，本着先解决主要问题的原则，做了下列事情。</p>
<ol>
<li>打开Chrome 查看打开url时候的加载时序图。</li>
<li>尝试看加载分为哪几个步骤，并调整加载时候的网络状况（Chrome自带)观察在不同网络情况下的加载速度，例如2G 与3G, 3G下又有(Good, Regular, Bad) 三个等级。</li>
</ol>
<p>发觉这个移动端站点在3G Bad 的情况下加载时间竟然约为10s。 到所有完成是12s。 也就是说，光加载资源就10s。时序图如下，</p>
<p><img src="https://raw.githubusercontent.com/TylerYang/images/master/blog/lx.png" alt="State Diagram"></p>
<h2 id="分析">分析</h2><p>从图中可以看出，整个过程大致分为三个阶段，<br>第一阶段, 加载RequireJS, 等RequireJS 加载完运行代码<br>第二阶段, 通过RequireJS 加载 main.js, main.js加载完 开始Angular 的Bootstrap, (初始化应用模块，初始化路由以及动态加载模块）<br>第三阶段, 根据当前url 动态加载对应模块的controller 以及 html，之后对页面进行渲染。</p>
<p>很明显原来的架构意图在于通过RequireJS 管理模块之间的依赖关系，并且随着页面的跳转逐渐加载新的Controller 与模版。典型的渐进加载思路，应该说是一个很美好的想法，但并不适用于当前。主要原因我认为在于当前移动网络并没有想象中这么乐观，2g 3g(regular, bad)还是比比皆是。这种通过RequireJS 来管理模块依赖，让移动端项目强依赖于RequireJS<br>的方式无论从任何页面进入项目，总会有两段不必要的时间花费（无论以何种方式优化）。</p>
<ol>
<li>加载并运行RequireJS</li>
<li>动态加载Controller 与 模版</li>
</ol>
<p>回去看项目代码，发现项目完全通过RequireJS 进行管理模块，甚至连动态加载controller 都通过RequireJS 来做，要去掉以上两点，我的看法是在开发过程中仅通过RequireJS 管理库之间的依赖，而在构建过程中把RequireJS 相关部分从项目中剥离出去。 </p>
<p>换言之，在Development 环境中仍存在RequireJS, 与动态加载部分。在Production 环境中去除 RequireJS, 把所有的第三方库合成一个文件，把所有的app 合成一个文件，html<br>编译成js。在构建过程中去除动态加载部分。</p>
<p>此时项目还不是很大，整个项目页面主要也就三十来个。我认为这时候应该优先对项目架构进行修正以减少技术债。随着时间增长，这种由于架构导致的加载性能问题只会越来越严重。并且修正起来难度会越来越大（耦合度会随着时间逐渐增加）</p>
<p>分析完主要问题，开始着手从项目中去除RequireJS 的模块管理部分以及编写构建过程。计划时间花费应该在2天左右。明天国庆回老家，后天完成。到时候不上简单示意图。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="起因">起因</h2><p>最近在帮助重写一个移动端h5 架构。说起来这是后话，主要起因是有个基于RequireJS 跟 AngularJS 开发的移动端HTML5 网站。 本身定义为Web Application。接到优化加载时间的需求，本着先解决主要问题的原则]]>
    </summary>
    
      <category term="web" scheme="tyleryang.github.io/tags/web/"/>
    
      <category term="工程" scheme="tyleryang.github.io/tags/%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="web" scheme="tyleryang.github.io/categories/web/"/>
    
      <category term="架构" scheme="tyleryang.github.io/categories/web/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[最近的生活 - 生活]]></title>
    <link href="tyleryang.github.io/2015/09/20/%E6%9C%80%E8%BF%91%E7%9A%84%E7%94%9F%E6%B4%BB/"/>
    <id>tyleryang.github.io/2015/09/20/最近的生活/</id>
    <published>2015-09-20T15:23:45.000Z</published>
    <updated>2015-09-20T16:04:40.000Z</updated>
    <content type="html"><![CDATA[<p>前些日子把个人博客从github 上搬到了树莓派里，给树莓派装了nodejs， git等东东。同时把家里的两级路由变成了一个网络桥接以及一个以及路由。当时弄到了晚上三点，印象颇为深刻。 </p>
<p>原先有个路由是电信那边租过来的，刚开始就被设好，后来自己买多了一个华为的荣耀路由。想着这样可以用ddns把自己的树莓派曝露到英特网下，从而可以自己setup 自己的server，将来还可以加蓝牙dangle把家里搞成小型物联网。 于是就注册了花生壳，却发现无论如何都无法从外网访问到自己的树莓派。后来发现是因为华为绑定花生壳账号的时候是把自己被电信光猫（一级路由）分配的ip<br>绑定给了花生壳，于是果断把一级路由刷掉取消拨号转为桥接，再把华为的拨号加上，搞定。</p>
<p>再之后就是开发了一个小小的angular keyboard，花了几个小时吧，写着玩。具体见github。 </p>
<p>leetcode 刷题的进度最近都下来了，工作确实很忙，晚上回来基本都是头疼，躺一会就起来健身，俯卧撑仰卧起坐啥的还是要做的。星期六日基本都会去咖啡厅刷题写代码。</p>
<p>react native 果然会慢慢活起来，还记得四月刚出的时候马上跑过去写了几个页面，写着跟twitter一样的界面，写起来毫无压力。之后上youtube 上看了react conference里面fb 的一个家伙写的animation demo，被震惊了很久。 现在react native又可以编译成android，就像发布会时说的那样，“我们相信web 的未来非常美好，但现在还是有不足之处，至少在我们等到html5 完美之前，react native 会成为我们目前最好的解决方案。” </p>
<p>前些日子上youtube 上看了不来梅大学的 suffix tree 的视频，实现起来确实蛮累的。trie tree 实现起来这么简单，但适用范围却很窄。尤记得当时面试的时候被北大哥问suffix tree跟优先队列的实现问的面红耳赤的自己,当时回来跟steven 聊了好久，steven 说了几个重要的数据结构一定要掌握，于是默默记在心中。感觉人生就是不断的遇到秒杀你的人，但人生的意义却是一次次被秒杀，一次次爬起来继续练。</p>
<p>这两天早上练了一上午球，下午跑去写了知乎的小爬虫，准备封装好基本API。顺便尝试了下koa 的东东，ECMAScript 的yield 真是蛮有意思的，刚开始以为yield 是可以解决异步问题，后来发现是koa 利用generator 解决了异步回调，google 了一下，貌似很多人都有这个误会。 另外 generator 里面的peak 运行语句的方式会是一个蛮有意思的考点吧。 koa 封装的middleware 只能赞一个。具体代码见github。 </p>
<p>好几个月没认真去stackoverflow 刷答案，昨天跑去看了一下，发现有个人提了一个问题，说是内嵌的document.write 跟用script src 引入的js脚本里面的document.write 运行结果不一致，一个只是append 文字进去，后者则是删除文档原有的markup，然后append text。 当时看到的时候也觉得很奇怪，后来第一反应是去mdn 查文档，看了一下发现是内嵌的document.write 是不会自动先调用 document.open，而document.open<br>的作用恰恰是清空整个文档。给问这个问题的人点了赞，答了题，拿了几十分。</p>
<p>早上公交时间有点长，就在车上看《编程珠玑》，一本书看了这么久，也是怪不好意思的。有些地方觉得没必要太着重，比如空间的优化，举的例子还是很久之前的。但对于马戏团的跳法觉得蛮有意思的。</p>
<p>接下来的日子，网上订了蓝牙灯泡跟蓝牙usb 接口，一方面要写知乎爬虫，之后setup 到树莓派下，然后再写一个react native 的ios app做一个知乎大百科。接着是弄好基本的物联网简易平台，从手机端用ios app 通过3g连接到树莓派，再由树莓派通过蓝牙连接到蓝牙灯泡。至少刚工作的时候做过类似的东西，做起来应该难度不大。</p>
<p>国庆节就快到了，连续七天的假期简直是一种奢侈，好好安排下自己国庆时候要刷的题目，写的项目还有就是许久未见的朋友，估计会一块约打球。不要浪费时间在不必要的时候，秉承着这个原则，几乎去哪都是最快去。有时候也会想是否错过了很多，有时候你承担的多了，你就过的不会这么轻松吧。</p>
<p>还记得那个草帽，我会去还给你的！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前些日子把个人博客从github 上搬到了树莓派里，给树莓派装了nodejs， git等东东。同时把家里的两级路由变成了一个网络桥接以及一个以及路由。当时弄到了晚上三点，印象颇为深刻。 </p>
<p>原先有个路由是电信那边租过来的，刚开始就被设好，后来自己买多了一个华为的]]>
    </summary>
    
      <category term="生活" scheme="tyleryang.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="生活" scheme="tyleryang.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Candy - Leetcode]]></title>
    <link href="tyleryang.github.io/2015/08/11/Candy-Leetcode/"/>
    <id>tyleryang.github.io/2015/08/11/Candy-Leetcode/</id>
    <published>2015-08-11T12:30:50.000Z</published>
    <updated>2015-08-11T14:47:21.000Z</updated>
    <content type="html"><![CDATA[<p>This is a very interesting question and it have a bunch of corner cases that we need to consider. (It takes me more than 5 hours to solve it at the first time.)</p>
<h3 id="Candy">Candy</h3><blockquote>
<p>There are N children standing in a line. Each child is assigned a rating value.</p>
<p>You are giving candies to these children subjected to the following requirements:</p>
<p>Each child must have at least one candy.<br>Children with a higher rating get more candies than their neighbors.<br>What is the minimum candies you must give?</p>
</blockquote>
<h3 id="Analysis">Analysis</h3><p>In a word, the higher rating value you get than your neighbors, the more candies you should get.</p>
<p>Considering the rating array below,<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3]</span><br></pre></td></tr></table></figure></p>
<p>the output should be <code>6</code>. This is because the first child have 1 candy, and the next should have 2 candies according to his rating value. It’s easy to get the value.</p>
<p>How about two child are getting same rating value? For example, for <code>[1, 2, 2, 2]</code> the right answer is <code>4</code>. <strong>Children with a higher rating get more candies than their neighbors.</strong></p>
<p>One important thing in solving this problem is, we want to give the minimum candies. This means each time we get a peek rating value, the next child can only have 1 candy until we meet the third child whose rating value is lower than the 2nd one.</p>
<p>Consider the array below,<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ratings [1, 2, 6, 5, 4, 3, 2]&#10;   i     0  1  2  3  4  5  6</span><br></pre></td></tr></table></figure></p>
<p>When we meet the first child(i: 0). We give only 1 candy to him. So now our <code>totalCandies</code> is <code>1</code>.<br>And then the second, the third child we can just simply repeat the same process. Then we update our <code>totalCandies</code> in this way.<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> ratings     [1, 2, 6, 5, 4, 3, 2]&#10;    i         0  1  2  3  4  5  6&#10;totalCandies  1  3  6</span><br></pre></td></tr></table></figure></p>
<p>Next we meet the 4th child(i: 3), because we know the previous child have the same rating value, so we can simply give only one candy to this child. And then we update our <code>totalCandies</code>.<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> ratings     [1, 2, 6, 5, 4, 3, 2]&#10;    i         0  1  2  3  4  5  6&#10;totalCandies  1  3  6  7</span><br></pre></td></tr></table></figure></p>
<p>We meet the 5th child now(i: 4), we can give only 1 candies to him, but we need to give the previous child one more candy for compensation. So update our <code>totalCandies</code>.<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> ratings     [1, 2, 6, 5, 4, 3, 2]&#10;    i         0  1  2  3  4  5  6&#10;  candy       1  2  3  2  1&#10;totalCandies  1  3  6  7  9</span><br></pre></td></tr></table></figure></p>
<p>As for compensation, another question to this is, when we should give one more candy to the peek child?(i: 2) Appearently when our candy gap is smaller than our position gap, we need to give one more candy for compensation. For example, when we meet the 6th child, our candy gap is <code>3 - 1 = 2</code>, the position gap is <code>5 - 2 = 3</code>. So at this moment, we need to <code>totalCandies++</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> ratings     [1, 2, 6, 5, 4, 3, 2]&#10;    i         0  1  2  3  4  5  6&#10;  candy       1  2  4  3  2  1&#10;totalCandies  1  3  6  7  9  13</span><br></pre></td></tr></table></figure></p>
<p><a href="https://leetcode.com/problems/candy/" target="_blank" rel="external">Here is the Candy in leetcode oj.</a><br>Here is implementation,<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">candy</span><span class="params">(<span class="keyword">int</span>[] ratings)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ratings.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> ratings.length;</span><br><span class="line">        <span class="keyword">int</span> totalCandies = <span class="number">1</span>, prevCandy = <span class="number">1</span>, peekPos = <span class="number">0</span>, peekCandy = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; ratings.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(ratings[i] &gt; ratings[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                prevCandy++;</span><br><span class="line">                peekPos = i;</span><br><span class="line">                peekCandy = prevCandy;</span><br><span class="line">                totalCandies += prevCandy;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                prevCandy = <span class="number">1</span>;</span><br><span class="line">                totalCandies += prevCandy;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(ratings[i] == ratings[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                    peekPos = i;</span><br><span class="line">                    peekCandy = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                totalCandies += i - peekPos - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(peekCandy - <span class="number">1</span> &lt;  i - peekPos) &#123;</span><br><span class="line">                    totalCandies++;   </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> totalCandies;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><a href="https://github.com/TylerYang/leetcode/blob/master/135.Candy/Solution.java" target="_blank" rel="external">Full version code</a></p>
<h3 id="Conclusion">Conclusion</h3><p>Nice problem, though there are some guys can solve it with linear space complexity, in this way we only use O(1) space complexity which I think it’s better than the other solution.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This is a very interesting question and it have a bunch of corner cases that we need to consider. (It takes me more than 5 hours to solve]]>
    </summary>
    
      <category term="Greedy Algorithm" scheme="tyleryang.github.io/tags/Greedy-Algorithm/"/>
    
      <category term="Leetcode" scheme="tyleryang.github.io/tags/Leetcode/"/>
    
      <category term="Interview" scheme="tyleryang.github.io/categories/Interview/"/>
    
      <category term="Leetcode" scheme="tyleryang.github.io/categories/Interview/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Dependency Injection in JavaScript]]></title>
    <link href="tyleryang.github.io/2015/08/01/Dependency-Injection-in-JavaScript/"/>
    <id>tyleryang.github.io/2015/08/01/Dependency-Injection-in-JavaScript/</id>
    <published>2015-08-01T14:55:47.000Z</published>
    <updated>2015-08-02T08:23:56.000Z</updated>
    <content type="html"><![CDATA[<p>Dependency Injection is kind of design pattern. Well, although it is not in the GOF’s design pattern list, but I think it is getting more and more important.</p>
<h3 id="Why_we_need_Dependency_Injection?">Why we need Dependency Injection?</h3><p>Firstly let us think about why we need dependency injection. Suppose we have a function below,<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CoffeeMaker</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> grinder = <span class="keyword">new</span> Grinder();</span><br><span class="line">    <span class="keyword">var</span> pump = Pump.getInstance();</span><br><span class="line">    <span class="keyword">var</span> heater = app.get(<span class="string">"Heater"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>.brew = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        grinder.grind();</span><br><span class="line">        heater.on();</span><br><span class="line">        pump.pump();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>This is not a good example, because the <code>CoffeeMaker</code> is tightly couple to this particular environment, which means to use <code>CoffeeMaker</code> we need to make sure we can get the <code>Grinder</code>, <code>Pump</code> and <code>Heater</code> in our environment.</p>
<p>If we just write down our code in one function, it’s not that kind of bad thing. How about in our project? Let’s me give u one more function. </p>
<p>Well, definitely we get a main function looks like the code below,<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> coffeeMaker = <span class="keyword">new</span> CoffeeMaker();</span><br><span class="line">    coffeeMaker.brew();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>For now, if we want to test <code>main</code> function, <strong>we need to make sure we have <code>CoffeeMaker</code> in our environment.</strong> Further more, we need to check <code>CoffeeMaker</code>‘s code and <strong>we need to make sure all the things <code>CoffeeMaker</code> depends on are exist.</strong> In our example, they are <code>Grinder</code>, <code>Pump</code> and <code>Heater</code>.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">main =&#62; CoffeeMaker =&#62; Grinder, Pump, Heater</span><br></pre></td></tr></table></figure></p>
<p><strong>In a word, to test <code>main</code> function, we need to create <code>CoffeeMaker</code>, <code>Grinder</code>, <code>Pump</code> and <code>Heater</code> in our test environment.</strong></p>
<p>Think about it, when our project getting bigger and bigger, we get a chance to have a controller or service which have more than 1000 lines. Are we still be able to maintain all these code?</p>
<p>To do it in a better way, let’s change our code into this.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CoffeeMaker</span>(<span class="params">grinder, heater, pump</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.blew = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        grinder.grind();</span><br><span class="line">        heater.on();</span><br><span class="line">        pump.pump();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params">coffeeMaker</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> injector = <span class="keyword">new</span> Injector();</span><br><span class="line">    <span class="keyword">var</span> coffeeMaker = injector.get(CoffeeMaker);</span><br><span class="line">    </span><br><span class="line">    coffeeMaker.blew();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Now, if we want to test main function, we just simply mock coffeMaker and make sure our <code>mockCoffeeMaker</code> have the function <code>blew</code>, that’s all!</p>
<h3 id="Create_Our_Own_Dependency_Injection_Component">Create Our Own Dependency Injection Component</h3><p>Actually, this is how angular DI works in angular 1.x; For next generation, they are going to use annotation to do this.(TypeScript can support annotation)</p>
<p>Unlike Java, we don’t have annotation in JavaScript, so we might need to use some magic trick to make one.<br>In our example, even though we know the formal parameters are correspond to our functions’ name. But our interpreter don’t know about this. When we write down the code below, there’s no differences between <code>CoffeeMaker1</code> and <code>CoffeeMaker2</code>.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//function1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CoffeeMaker1</span>(<span class="params">grinder, heater, pump</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.blew = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        grinder.grind();</span><br><span class="line">        heater.on();</span><br><span class="line">        pump.pump();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//function2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CoffeeMaker2</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.blew = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        a.grind();</span><br><span class="line">        b.on();</span><br><span class="line">        c.pump();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>So how can we make sure in our <code>CoffeeMaker</code> we will invoke the right function? This is where the trick happen, <code>toString</code>;</p>
<p>Basically we just simply invoke <code>CoffeeMaker.toString()</code>, then we will get the function in a string format. And then we can use regex get the parameters list.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> FN_ARGS = <span class="regexp">/^function\s*[^\(]*\(\s*([^\(]*)\)/m</span>;</span><br><span class="line"><span class="keyword">var</span> str = CoffeeMaker.toString();</span><br><span class="line"><span class="keyword">var</span> injectArr =  str.match(FN_ARGS);</span><br><span class="line"><span class="built_in">console</span>.log(injectArr);</span><br><span class="line"><span class="comment">//["function CoffeeMaker(grinder, heater, pump)", "grinder, heater, pump"]</span></span><br></pre></td></tr></table></figure>
<p>For now we can easily pass our dependency into the CoffeeMaker.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Injector</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.cache = [];</span><br><span class="line">    <span class="keyword">this</span>.path = [];</span><br><span class="line">    <span class="keyword">this</span>.INSTANTIATING = &#123;&#125;; </span><br><span class="line">&#125;</span><br><span class="line">Injector.prototype.invoke = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">var</span> args = [];</span><br><span class="line">    <span class="keyword">var</span> $inject = <span class="keyword">this</span>.annotate(fn);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; $inject.length; i++) &#123;</span><br><span class="line">        funcKey = $inject[i];</span><br><span class="line">        args.push(<span class="keyword">this</span>.get(funcKey));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, args);</span><br><span class="line">&#125;;</span><br><span class="line">Injector.prototype.annotate = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> FN_ARGS = <span class="regexp">/^function\s*[^\(]*\(\s*([^\(]*)\)/m</span>;</span><br><span class="line">	<span class="keyword">var</span> FN_TRIM = <span class="regexp">/^\s+|\s+$/</span>;</span><br><span class="line">    <span class="keyword">var</span> fnStr = fn.toString();</span><br><span class="line">    <span class="keyword">var</span> matchArr = fnStr.match(FN_ARGS);</span><br><span class="line">    <span class="keyword">var</span> $inject = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(matchArr.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">	    <span class="keyword">var</span> arr = matchArr[<span class="number">1</span>].split(<span class="string">","</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">			arr[i] = arr[i].replace(FN_TRIM, <span class="string">''</span>);</span><br><span class="line">			$inject.push(arr[i]);</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $inject;</span><br><span class="line">&#125;;</span><br><span class="line">Injector.prototype.get = <span class="function"><span class="keyword">function</span>(<span class="params">funcName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.cache.hasOwnProperty(funcName)) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.cache[funcName] == <span class="keyword">this</span>.INSTANTIATING) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Circular dependency found: "</span> + funcName + <span class="string">" &lt;- "</span> + <span class="keyword">this</span>.path.join(<span class="string">" &lt;- "</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.cache[funcName];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.path.unshift(funcName);</span><br><span class="line">        <span class="keyword">this</span>.cache[funcName] = <span class="keyword">this</span>.INSTANTIATING;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.cache[funcName] = <span class="built_in">window</span>[funcName];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Dependency Injection is kind of design pattern. Well, although it is not in the GOF’s design pattern list, but I think it is getting more]]>
    </summary>
    
      <category term="design pattern" scheme="tyleryang.github.io/tags/design-pattern/"/>
    
      <category term="javascript" scheme="tyleryang.github.io/tags/javascript/"/>
    
      <category term="Language" scheme="tyleryang.github.io/categories/Language/"/>
    
      <category term="Javascript" scheme="tyleryang.github.io/categories/Language/Javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Valid Number - Leetcode]]></title>
    <link href="tyleryang.github.io/2015/08/01/Valid-Number-Leetcode/"/>
    <id>tyleryang.github.io/2015/08/01/Valid-Number-Leetcode/</id>
    <published>2015-08-01T08:32:43.000Z</published>
    <updated>2015-08-01T13:04:05.000Z</updated>
    <content type="html"><![CDATA[<p>The hardest problem in leetcode, and it force me to read something new, maybe this is why we solve the problem in the online judge system.</p>
<h3 id="Valid_Number">Valid Number</h3><blockquote>
<p>Valid if a given string is numeric.</p>
<p>Some examples:<br><code>&quot;0&quot;</code> =&gt; <code>true</code><br><code>&quot; 0.1&quot;</code> =&gt; <code>true</code><br><code>&quot;abc&quot;</code> =&gt; <code>true</code><br><code>&quot;1 a&quot;</code> =&gt; <code>true</code><br><code>&quot;2e10&quot;</code> =&gt; <code>true</code></p>
</blockquote>
<h3 id="Analysis">Analysis</h3><p>Well, regular expression must be a way to solve this problem. But I don’t think the recuiter would accept regex solution. </p>
<p>This problem is all about state and the transition which is how regular expression worked. </p>
<blockquote>
<p>Finite State Automata<br>A finite-state machine or finite-state automatata, or simply a state machine, is a mathematial model of computation used to design both computer programs and sequential logic circuits. It is conceived as an abstract machine that can be in one of a finite number of states. <strong>The machine is in only one state at a time;</strong>  — from Wikipedia <a href="https://en.wikipedia.org/wiki/Finite-state_machine" target="_blank" rel="external">Finite-state machine</a>.</p>
</blockquote>
<p>In a word, to know whether a string is numeric we need to know all the states and the possible transition. And after spend some time we can get the list below,<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1   + or -&#10;2   number (0 - 9)&#10;3   . (dot)&#10;4   e or E (exponent)&#10;5   others (includ space)</span><br></pre></td></tr></table></figure></p>
<p>With all this possible inputs, we can use the <a href="https://en.wikipedia.org/wiki/State_diagram" target="_blank" rel="external">State Diagram</a> to describe all the valid and the transitions.<br>For example, from <code>state1</code> it can be only transformed into <code>state2</code> or <code>state3</code>, which means <code>+3</code>, <code>-.4</code> are all valid numeric but <code>+e10</code>, <code>+ 4</code> are not.<br>To give a most complicated valid numeric expression should contains all states, <code>+0.42e-10</code> should be the one.<br>So we can draw down the State Diagram below,<br><img src="https://raw.githubusercontent.com/TylerYang/leetcode/master/65.ValidNumber/validNumber.png" alt="State Diagram"></p>
<p>From this diagram, we can write down the pseudo code blow,<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int state = 0;&#10;boolean hasNumber = false;&#10;for(each char in String s)&#123;&#10;    if(char is plus or minus) &#123;&#10;        if(state == 0 or 5) &#123;&#10;            state++;&#10;        &#125; else &#123;&#10;            return false;&#10;        &#125;&#10;    &#125; else if(char is number) &#123;&#10;        if(state == 0 or 1 or 2) &#123;&#10;            state = 2; &#10;            hasNumber = true;&#10;        &#125; else if(state == 3 or 4) &#123;&#10;            state = 4; &#10;            hasNumber = true;&#10;        &#125; else if(state == 5 or 6 or 7) &#123;&#10;            state = 7;&#10;        &#125;&#10;    &#125; else if(char is dot) &#123;&#10;        if(state == 0 or 1 or 2) &#123;&#10;            state = 3&#10;        &#125; else &#123;&#10;            return false;&#10;        &#125;&#10;    &#125; else if(char is exponent) &#123;&#10;        if(state == 2 or 3 or 4) &#123;&#10;            state = 5;&#10;        &#125; else &#123;&#10;            return false;&#10;        &#125;&#10;    &#125; else &#123;&#10;        return false;&#10;    &#125;&#10;&#125;&#10;return hashNumber &#38;&#38; (state == 2 or 3 or 4 or 7);</span><br></pre></td></tr></table></figure></p>
<p><a href="https://leetcode.com/problems/valid-number/" target="_blank" rel="external">Here is the Valid Number in leetcode oj.</a><br><a href="https://github.com/TylerYang/leetcode/blob/master/65.ValidNumber/Solution.java" target="_blank" rel="external">Here is the full version of java implementation.</a></p>
<h3 id="Conclusion">Conclusion</h3><p>As for my understanding, this problem has a very similar concept with Knuth-Morris-Pratt algorithm which is known as KMP algorithm. They are all base on <strong>Finite State Automata</strong>, which is really worth a try. Here I recommend <a href="http://www.amazon.com/Algorithms-4th-Robert-Sedgewick/dp/032157351X/ref=sr_1_1?ie=UTF8&amp;qid=1438428554&amp;sr=8-1&amp;keywords=algorithm" target="_blank" rel="external"><strong>Algorithm (the 4th Edition)</strong></a>, in this book, the author give a very detail introduction of <strong>StateMachine</strong> in chapter 5.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>The hardest problem in leetcode, and it force me to read something new, maybe this is why we solve the problem in the online judge system]]>
    </summary>
    
      <category term="Finite State Automata" scheme="tyleryang.github.io/tags/Finite-State-Automata/"/>
    
      <category term="Leetcode" scheme="tyleryang.github.io/tags/Leetcode/"/>
    
      <category term="State Machine" scheme="tyleryang.github.io/tags/State-Machine/"/>
    
      <category term="Interview" scheme="tyleryang.github.io/categories/Interview/"/>
    
      <category term="Leetcode" scheme="tyleryang.github.io/categories/Interview/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Palindrome PartitioningII - Leetcode]]></title>
    <link href="tyleryang.github.io/2015/08/01/Palindrome-PartionningII-Leetcode/"/>
    <id>tyleryang.github.io/2015/08/01/Palindrome-PartionningII-Leetcode/</id>
    <published>2015-07-31T16:09:13.000Z</published>
    <updated>2015-08-01T08:22:57.000Z</updated>
    <content type="html"><![CDATA[<p>This should be one of the most insteresting algorithm problem I try to solve within this month.</p>
<p>Here is the question,</p>
<h3 id="Palindrome_PartitioningII">Palindrome PartitioningII</h3><blockquote>
<p>Given a string s, partition s such that every substring of the partition is a palindrome.<br>Return the minimum cuts needs for a palindrome partitioning of s.</p>
<p>For example, given s = “aab”,<br>Return <code>1</code> since the palindrome partitioning <code>[&quot;aa&quot;, &quot;b&quot;]</code> could be produced using 1 cut.</p>
</blockquote>
<h3 id="Analysis">Analysis</h3><p>To get the minimum cut, of course backtracking can get an answer. To do it in a better way, <strong>Dynamic Programming</strong> will be suit for us.</p>
<p>Let’s say, we want to know the minimum cut for string <code>s = &quot;aabaabcb&quot;</code>,<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 1 2 3 4 5 6 7&#10;a a b a a c b c</span><br></pre></td></tr></table></figure></p>
<p>Apparently, we need to find out all the palindrome substring in it so that we can get the minimum cut. But we can reuse some part of the substring. For example, if we know <code>aba</code> is a palindrome, to valid <code>aabaa</code> we only need to make sure the first character equals to the last one.<br>So the first step is to find out all the substring which is palindrome.<br>We use 2 dimension array to store all the result. For String <code>s = &quot;aabaabcb&quot;</code>, substring s.substring(1, 3) is a palindrome, so we set <code>dp[1][3] = true</code>, here is the java code.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length()][s.length()];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = s.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; s.length(); j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s.charAt(j) == s.charAt(i) &amp;&amp; (j - i &lt; <span class="number">2</span> || dp[i + <span class="number">1</span>][j - <span class="number">1</span>] == <span class="keyword">true</span>)) dp[i][j] = <span class="keyword">true</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>after run this code, we get a two dimension array below,<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 1 0 0 1 0 0 0&#10;0 1 0 1 0 0 0 0&#10;0 0 1 0 0 0 0 0&#10;0 0 0 1 1 0 0 0&#10;0 0 0 0 1 0 0 0&#10;0 0 0 0 0 1 0 1&#10;0 0 0 0 0 0 1 0&#10;0 0 0 0 0 0 0 1</span><br></pre></td></tr></table></figure></p>
<p>Actually it is easy to get this 2d array, the trick is in the next step.<br>To get the minimum cut from it, we need to compare different combinations, e.g for string <code>abaacbc</code> the minimun cut should be one of the combinations below,<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subStr.length() - 1&#10;1 + minCut(&#34;baacbc&#34;) //a is palindrome&#10;1 + minCut(&#34;acbc&#34;)   //aba is palindrome</span><br></pre></td></tr></table></figure></p>
<p>A navie idea is code it up with simply recursive call. Can we do it better? To get the min cut of <code>abaacbc</code>, we need to know the min cut of <code>baacbc</code> and <code>acbc</code>. Then we know this is another <strong>Dynamic Programming</strong> solution. In another word, to solve this problem, we need to use <strong>Dynamic Programming</strong> two times.</p>
<p>Let’s create an one-dimension array, <code>minCut</code>, each element stands for min cut of s.substring(i)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] minCut = <span class="keyword">new</span> <span class="keyword">int</span>[s.length() + <span class="number">1</span>]; <span class="comment">//last should be ""</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; minCut.length; i++) &#123;</span><br><span class="line">    minCut[i] = minCut.length - i - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[7 6 5 4 3 2 1 0 -1]</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = s.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; s.length(); j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(dp[i][j] == <span class="keyword">true</span>) &#123;</span><br><span class="line">            minCut[i] = Math.min(minCut[i], <span class="number">1</span> + minCut[j + <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> minCut[<span class="number">0</span>];</span><br></pre></td></tr></table></figure></p>
<h3 id="Conclusion">Conclusion</h3><p>The interesting part of this problem is we need to use DP two times. During our processes, we should know which part we can improve. <a href="https://github.com/TylerYang/leetcode/blob/master/132.PalindromePartitioningII/Solution.java" target="_blank" rel="external">Here is the java code.</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This should be one of the most insteresting algorithm problem I try to solve within this month.</p>
<p>Here is the question,</p>
<h3 id="]]>
    </summary>
    
      <category term="Dynamic Programming" scheme="tyleryang.github.io/tags/Dynamic-Programming/"/>
    
      <category term="Leetcode" scheme="tyleryang.github.io/tags/Leetcode/"/>
    
      <category term="Interview" scheme="tyleryang.github.io/categories/Interview/"/>
    
      <category term="Leetcode" scheme="tyleryang.github.io/categories/Interview/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Reverse Hash Function - Google Challenge]]></title>
    <link href="tyleryang.github.io/2015/07/25/Reverse-Hash-Function-Google-Challenge/"/>
    <id>tyleryang.github.io/2015/07/25/Reverse-Hash-Function-Google-Challenge/</id>
    <published>2015-07-25T08:01:42.000Z</published>
    <updated>2015-08-01T12:50:19.000Z</updated>
    <content type="html"><![CDATA[<p>Recently I’ve been doing the Google Challenge, and I found a very interesting algorithm problem. Here is the problem.</p>
<h3 id="Reverse_a_Hash_Function_(Level_3)">Reverse a Hash Function (Level 3)</h3><p>The function takes a 16 byte input and gives a 16 byte output. It uses multiplication (*), bit-wise exclusive OR (XOR) and modulo (%) to calculate an element of the digest based on elements of the input message: </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">digest [i] = ( (<span class="number">129</span> * message[i]) XOR message[i-<span class="number">1</span>]) % <span class="number">256</span></span><br></pre></td></tr></table></figure>
<p>For the first element, the value of <code>message[-1]</code> is 0.<br>For example, if <code>message[0] = 1</code> and <code>message[1] = 129</code>, then:<br>For <code>digest[0]</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">129</span> * message[<span class="number">0</span>] = <span class="number">129</span></span><br><span class="line"><span class="number">129</span> XOR message[-<span class="number">1</span>] = <span class="number">129</span></span><br><span class="line"><span class="number">129</span> % <span class="number">256</span> = <span class="number">129</span></span><br></pre></td></tr></table></figure></p>
<p>Thus <code>digest[0] = 129</code>.<br>For digest[1]:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">129</span>*message[<span class="number">1</span>] = <span class="number">16641</span></span><br><span class="line"><span class="number">16641</span> XOR message[<span class="number">0</span>] = <span class="number">16640</span></span><br><span class="line"><span class="number">16640</span> % <span class="number">256</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure></p>
<p>Thus <code>digest[1] = 0</code>.<br>Write a function answer(digest) that takes <strong>an array of 16 integers</strong> and returns another array of 16 that correspond to the unique message that created this digest. Since each value is a single byte, the values are <strong>0 to 255</strong> for both message and digest.</p>
<h3 id="Test_cases">Test cases</h3><p>Inputs:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">int</span> list) digest = [<span class="number">0</span>, <span class="number">129</span>, <span class="number">3</span>, <span class="number">129</span>, <span class="number">7</span>, <span class="number">129</span>, <span class="number">3</span>, <span class="number">129</span>, <span class="number">15</span>, <span class="number">129</span>, <span class="number">3</span>, <span class="number">129</span>, <span class="number">7</span>, <span class="number">129</span>, <span class="number">3</span>, <span class="number">129</span>]</span><br></pre></td></tr></table></figure></p>
<p>Output:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">int</span> list) [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]</span><br></pre></td></tr></table></figure></p>
<p>Inputs:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">int</span> list) digest = [<span class="number">0</span>, <span class="number">129</span>, <span class="number">5</span>, <span class="number">141</span>, <span class="number">25</span>, <span class="number">137</span>, <span class="number">61</span>, <span class="number">149</span>, <span class="number">113</span>, <span class="number">145</span>, <span class="number">53</span>, <span class="number">157</span>, <span class="number">233</span>, <span class="number">185</span>, <span class="number">109</span>, <span class="number">165</span>]</span><br></pre></td></tr></table></figure></p>
<p>Output:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">int</span> list) [<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>, <span class="number">121</span>, <span class="number">144</span>, <span class="number">169</span>, <span class="number">196</span>, <span class="number">225</span>]</span><br></pre></td></tr></table></figure></p>
<h3 id="Analysis">Analysis</h3><p>Basically this problem is about how to reverse this expression,<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">digest [i] = ( (<span class="number">129</span> * message[i]) XOR message[i-<span class="number">1</span>]) % <span class="number">256</span></span><br></pre></td></tr></table></figure></p>
<p>The first moment I saw this problem, I was wondering maybe I can just simply move the modulo operator(%) to the right side, and then the <code>XOR</code> operator. For <code>129 * message[i]</code>, maybe I can use the forloop to find out the right one.</p>
<p>For <code>% 256</code> we know it is only set a upperbound to our hash result, XOR <code>message[i - 1]</code> will not affect the result of modulo(message[i - 1] is in the interleaving [0, 255]). which means<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">digest[i] = ((129 * message[i]) XOR message[i - 1]) % 256&#10;          = ((129 * message[i]) % 256) XOR message[i - 1]</span><br></pre></td></tr></table></figure></p>
<p>Considering the expression below,<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a ^ b = c;</span><br><span class="line">c ^ b = a;</span><br><span class="line">c ^ a = b;</span><br></pre></td></tr></table></figure></p>
<p>Appearently we know this will happen, if you want the approvement, <a href="/2015/07/25/About-XOR-operator/">here is another post about this.</a></p>
<p>We know the value of <code>digest[i]</code> and <code>message[i - 1]</code>, so we get the expression below,<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">digest[i] = ((129 * message[i]) % 256) XOR message[i - 1]&#10;digest[i] XOR message[i - 1] = (129 * message[i]) % 256</span><br></pre></td></tr></table></figure></p>
<p>Now the question become for x in [0, 255], y in [0, 255]</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(129 * x) % 256 = y //we know what is y (digest[i] ^ message[i - 1])</span><br></pre></td></tr></table></figure>
<p><strong><strong> What is x ? </strong></strong><br>We don’t know it yet. Let us clear our mind and run these code in your chrome web developer tool.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> x = <span class="number">0</span>; x &lt;= <span class="number">255</span>; x++) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"x:"</span> + x + <span class="string">", result: "</span> + (<span class="number">129</span> * x % <span class="number">256</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>From the result, we will see in some number when we run this expression,<br><code>129 * x % 256</code> it will equals to x. To be more clearly, let us run the javascript code into chrome dvp tool one more time.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> x = <span class="number">0</span>; x &lt;= <span class="number">255</span>; x += <span class="number">2</span>) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"x:"</span> + x + <span class="string">", result: "</span> + <span class="number">129</span> * x % <span class="number">256</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> x = <span class="number">1</span>; x &lt;= <span class="number">255</span>; x += <span class="number">2</span>) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"x:"</span> + x + <span class="string">", result: "</span> + <span class="number">129</span> * x % <span class="number">256</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Now we know that when the <code>x</code> is <strong><strong>EVEN</strong></strong>, <code>129 * x % 256</code> will equals to <code>x</code>. When <code>x</code> is <strong><strong>ODD</strong></strong> the result start from 129 until it reach 255, then it start from 1.</p>
<p>A very interesting fact about this express is, <code>129</code> and <code>256</code> are very insteresting numbers, <code>129 == 256 / 2 + 1</code>, Which means per two 129 we will get 258 and after mod 256 we only get <code>2</code>. when x is <strong><strong>EVEN</strong></strong>, let’s say x is <code>4</code>,<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">129 * 4 % 256 = (129 * 2 + 129 * 2) % 256&#10;              = (256 + 2 + 256 + 2) % 256&#10;              = 4</span><br></pre></td></tr></table></figure></p>
<p>This is why when <code>x</code> is <strong><strong>EVEN</strong></strong> the result is equals to itself.</p>
<p>Then how about <code>x</code> is <strong><strong>ODD</strong></strong>? Assumming <code>x</code> is 5, we can get the result below,<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">129 * 5 % 256 = (129 * 2 + 129 * 2 + 129) % 256&#10;              = (256 + 2 + 256 + 2 + 129) % 256&#10;              = 4 + 129 &#10;              = 5 + 128</span><br></pre></td></tr></table></figure></p>
<p>For <strong><strong>ODD</strong></strong> <code>x</code>, one thing we need to consider is, if <code>x</code> is larger than 128, this expression will smaller than 128, let’s say <code>x</code> is 131<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">129 * 131 % 256 = (129 * 128 + 129 * 3) % 256&#10;                = (128 * 128 + 128 + 256 + 2 + 129) % 256&#10;                = (128 + 129 + 2) % 256&#10;                = (256 + 3) % 256&#10;                = 3</span><br></pre></td></tr></table></figure></p>
<p>For now we can write down our pseudo code blow,<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(digest[i] XOR message[i - 1] is EVEN) &#123;&#10;&#9;//message[i] is EVEN&#10;&#9;message[i] = digest[i] ^ message[i - 1]&#10;&#125; else &#123;&#10;&#9;//message[i] is ODD&#10;&#9;if(digest[i] &#62; 128) &#123;&#10;&#9;&#9;if(message[i - 1] &#62; 128) &#123;&#10;&#9;&#9;&#9;// 129 * message[i] % 256 &#60; 128&#10;&#9;&#9;&#9;// message[i] &#62; 128&#10;&#9;&#9;&#9;message[i] += 128;&#10;&#9;&#9;&#125; else &#123;&#10;&#9;&#9;&#9;// 129 * message[i] % 256 &#62; 128&#10;&#9;&#9;&#9;// message[i] &#60; 128&#10;&#9;&#9;&#9;message[i] -= 128;&#10;&#9;&#9;&#125;&#10;&#9;&#125; else &#123;&#10;&#9;&#9;if(message[i - 1] &#62; 128) &#123;&#10;&#9;&#9;&#9;// 129 * message[i] % 256 &#62; 128&#10;&#9;&#9;&#9;// message[i] &#60; 128&#10;&#9;&#9;&#9;message[i] += 128;&#10;&#9;&#9;&#125; else &#123;&#10;&#9;&#9;&#9;// 129 * message[i] % 256 &#60; 128&#10;&#9;&#9;&#9;// message[i] &#62; 128&#10;&#9;&#9;&#9;message[i] -= 128;&#10;&#9;&#9;&#125;&#10;&#9;&#125;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>Here is Java Code,<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] reverseHash(<span class="keyword">int</span>[] digest) &#123;</span><br><span class="line">        <span class="keyword">int</span> prevM = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] message = <span class="keyword">new</span> <span class="keyword">int</span>[digest.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; digest.length; i++) &#123;</span><br><span class="line">            message[i] = tmp;</span><br><span class="line">            <span class="keyword">if</span>(tmp % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(digest[i] &gt; <span class="number">128</span>) &#123;</span><br><span class="line">                    message[i] += message[i - <span class="number">1</span>] &gt; <span class="number">128</span> ? <span class="number">128</span> : -<span class="number">128</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    message[i] += message[i - <span class="number">1</span>] &gt; <span class="number">128</span> ? <span class="number">128</span> : -<span class="number">128</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//corner case  e.g[1,1,1,1,1,1,1,1,1,1,1...];</span></span><br><span class="line">                message[i] = (message[i] + <span class="number">256</span>) % <span class="number">256</span>; </span><br><span class="line">            &#125; </span><br><span class="line">            prevM = message[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Conclusion">Conclusion</h3><p>Personally, I think this problem really worth a try. It’s about some specify algorithm(e.g Dynamic Programming, Greedy Algorithm). This problem is only about the basic bit manipulation and some math stuff. At least, this problem tell me, it’s time to read the csapp one more time. : )</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Recently I’ve been doing the Google Challenge, and I found a very interesting algorithm problem. Here is the problem.</p>
<h3 id="Reverse]]>
    </summary>
    
      <category term="Algorithm" scheme="tyleryang.github.io/tags/Algorithm/"/>
    
      <category term="Google Challenge" scheme="tyleryang.github.io/tags/Google-Challenge/"/>
    
      <category term="Interview" scheme="tyleryang.github.io/categories/Interview/"/>
    
      <category term="Google Chanllenge" scheme="tyleryang.github.io/categories/Interview/Google-Chanllenge/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[About XOR operator]]></title>
    <link href="tyleryang.github.io/2015/07/25/About-XOR-operator/"/>
    <id>tyleryang.github.io/2015/07/25/About-XOR-operator/</id>
    <published>2015-07-25T06:15:16.000Z</published>
    <updated>2015-07-25T06:17:17.000Z</updated>
    <content type="html"><![CDATA[<p>I think the chrome web developer tool is very useful, I perfer to use it to validate some expression or some api instead of using java compiler or c compiler. Considering the expression below.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">129</span>;</span><br><span class="line"><span class="keyword">var</span> c = a ^ b;</span><br><span class="line">a ^ b;  <span class="comment">// 132</span></span><br><span class="line">b ^ c;  <span class="comment">// 5 equals to a</span></span><br></pre></td></tr></table></figure>
<p>Let me prove this is right. The binary expression of integer 5 is, <code>101</code><br>for 129 is, <code>100000001</code></p>
<p>XOR means with the same bit value you will get <code>0</code>, and vise versa.<br>So when we do <code>a ^ b</code> means we will get the bit which only exist in <code>a</code> or <code>b</code>.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span> <span class="number">7</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span>  <span class="comment">//a</span></span><br><span class="line">              XOR</span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>  <span class="comment">//b</span></span><br><span class="line">-----------------</span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span>  <span class="comment">//c  bits only exist in a or b</span></span><br></pre></td></tr></table></figure></p>
<p>So <code>b ^ c</code> means you will get the bit only exist in b or c.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span> <span class="number">7</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="comment">//b</span></span><br><span class="line">              XOR</span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="comment">//c</span></span><br><span class="line">-----------------</span><br></pre></td></tr></table></figure></p>
<p>Appearently when we  <code>a ^ b</code>, their public bits are all set to <code>0</code>(The 0th) and the bits only exist in b or a is already save into the c(The 2th from a and the 8th from b). So At this moment <code>b ^ c</code> will equal to ‘bits only exist in a and bits exist in both <code>a</code> and <code>b</code> which is <code>a</code>‘(The 0th from <code>a</code> and the 2th from <code>b</code>). </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>I think the chrome web developer tool is very useful, I perfer to use it to validate some expression or some api instead of using java co]]>
    </summary>
    
      <category term="CSAPP" scheme="tyleryang.github.io/tags/CSAPP/"/>
    
  </entry>
  
</feed>