<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TY</title>
  <subtitle>Life is short, just code it up!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="tyleryang.github.io/"/>
  <updated>2016-04-17T06:58:51.000Z</updated>
  <id>tyleryang.github.io/</id>
  
  <author>
    <name>Tyler Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Morris Traversal - Algorithm</title>
    <link href="tyleryang.github.io/2016/04/17/Morris-Traversal-Algorithm/"/>
    <id>tyleryang.github.io/2016/04/17/Morris-Traversal-Algorithm/</id>
    <published>2016-04-17T06:20:54.000Z</published>
    <updated>2016-04-17T06:58:51.000Z</updated>
    
    <content type="html">&lt;p&gt;Morris Traversal is a way to traverse the tree without using any extra space.&lt;/p&gt;
&lt;p&gt;It is inspired by the &lt;a href=&quot;https://en.wikipedia.org/wiki/Threaded_binary_tree&quot; title=&quot;Threaded Binary Tree from wiki&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Threaded Binary Tree&lt;/a&gt;. In threaded binary tree, with setting some extra pointers, it’s possible to cheaply find its successor.&lt;br&gt;The Morris Traversal leverage the rightmost node, so the space complexity is O(1).&lt;br&gt;Let’s see how it works.&lt;/p&gt;
&lt;p&gt;The pseudo code of inorder Morris Traversal is listed below,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Initialize current as root&lt;/li&gt;
&lt;li&gt;while current is not Null&lt;br&gt;  &lt;strong&gt;If&lt;/strong&gt; current doesn’t have left child&lt;ul&gt;
&lt;li&gt;Print current’s data&lt;/li&gt;
&lt;li&gt;Go to the right, i.e., &lt;code&gt;current = current -&amp;gt; right&lt;/code&gt;&lt;br&gt;&lt;strong&gt;Else&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Make current as right child of the rightmost node in current’s left sub tree&lt;/li&gt;
&lt;li&gt;Go to this left child, i.e., &lt;code&gt;current = current -&amp;gt; left&lt;/code&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Java Implementation,&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;inorderTraversal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TreeNode root)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (root == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TreeNode curr = root;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(curr != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (curr.left == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.print(curr.val + &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            curr = curr.right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            TreeNode next = curr.left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (next.right != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; next.right != curr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                next = next.right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (next.right == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; next.right != curr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                next.right = curr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                curr = curr.left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                System.out.print(curr.val + &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                next.right = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                curr = curr.right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The pseudo code of preorder Morris Traversal is listed below,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Initialize current as root&lt;/li&gt;
&lt;li&gt;while current is not Null&lt;br&gt;  &lt;strong&gt;If&lt;/strong&gt; current doesn’t have left child&lt;ul&gt;
&lt;li&gt;Print current’s data&lt;/li&gt;
&lt;li&gt;Go to the right, i.e., &lt;code&gt;current = current -&amp;gt; right&lt;/code&gt;&lt;br&gt;&lt;strong&gt;Else&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Make current as right child of the rightmost node in current’s left sub tree&lt;/li&gt;
&lt;li&gt;Print current’s data&lt;/li&gt;
&lt;li&gt;Go to this left child, i.e., &lt;code&gt;current = current -&amp;gt; left&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Java implementation,&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;preorderTraversal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TreeNode root)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (root == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TreeNode curr = root;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (curr != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (curr.left == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.print(curr.val + &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            curr = curr.right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            TreeNode next = curr.left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (next.right != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; next.right != curr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                next = next.right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (next.right == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                next.right = curr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                System.out.print(curr.val + &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                curr = curr.left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                curr = curr.right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                next.right = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;As you can see, although we modified the tree during the traversal, we revert them back in the second round.&lt;/p&gt;
&lt;p&gt;So for now we can know the advantages and the disadvantages,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Advantages&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Avoid recursion or stack which decrease the space complexity.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Disadvantages&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We can only make traversal at a time&lt;/li&gt;
&lt;li&gt;More prone to errors, more difficult to implement, if we compare the the stack or recursive version&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Morris Traversal is a way to traverse the tree without using any extra space.&lt;/p&gt;
&lt;p&gt;It is inspired by the &lt;a href=&quot;https://en.wikipedia.org/wiki/Threaded_binary_tree&quot; title=&quot;Threaded Binary Tree from wiki&quot;&gt;Threaded Binary Tree&lt;/a&gt;. In threaded binary tree, with setting some extra pointers, it’s possible to cheaply find its successor.&lt;br&gt;The Morris Traversal leverage the rightmost node, so the space complexity is O(1).&lt;br&gt;Let’s see how it works.&lt;/p&gt;
&lt;p&gt;The pseudo code of inorder Morris Traversal is listed below,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Initialize current as root&lt;/li&gt;
&lt;li&gt;while current is not Null&lt;br&gt;  &lt;strong&gt;If&lt;/strong&gt; current doesn’t have left child&lt;ul&gt;
&lt;li&gt;Print current’s data&lt;/li&gt;
&lt;li&gt;Go to the right, i.e., &lt;code&gt;current = current -&amp;gt; right&lt;/code&gt;&lt;br&gt;&lt;strong&gt;Else&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Make current as right child of the rightmost node in current’s left sub tree&lt;/li&gt;
&lt;li&gt;Go to this left child, i.e., &lt;code&gt;current = current -&amp;gt; left&lt;/code&gt;
    
    </summary>
    
      <category term="Data Structure and Algorithm" scheme="tyleryang.github.io/categories/Data-Structure-and-Algorithm/"/>
    
    
      <category term="Algorithm" scheme="tyleryang.github.io/tags/Algorithm/"/>
    
      <category term="Tree" scheme="tyleryang.github.io/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>Gray Code - Leetcode</title>
    <link href="tyleryang.github.io/2016/04/16/Gray-Code-Leetcode/"/>
    <id>tyleryang.github.io/2016/04/16/Gray-Code-Leetcode/</id>
    <published>2016-04-16T13:00:52.000Z</published>
    <updated>2016-04-16T13:56:59.000Z</updated>
    
    <content type="html">&lt;p&gt;Easy but this should be one of the most subtle problem in leetcode.&lt;/p&gt;
&lt;h3 id=&quot;Gray-Code&quot;&gt;&lt;a href=&quot;#Gray-Code&quot; class=&quot;headerlink&quot; title=&quot;Gray Code&quot;&gt;&lt;/a&gt;Gray Code&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;The gray code is a binary numeral system where two successive values differ in only one bit.&lt;/p&gt;
&lt;p&gt;Given a non-negative integer n representing the total number of bits in the code, print the sequence of gray code. A gray code sequence must begin with 0.&lt;/p&gt;
&lt;p&gt;For example, given n = 2, return [0,1,3,2]. Its gray code sequence is:&lt;/p&gt;
&lt;p&gt;00 - 0&lt;br&gt;01 - 1&lt;br&gt;11 - 3&lt;br&gt;10 - 2&lt;br&gt;Note:&lt;br&gt;For a given n, a gray code sequence is not uniquely defined.&lt;/p&gt;
&lt;p&gt;For example, [0,2,3,1] is also a valid gray code sequence according to the above definition.&lt;/p&gt;
&lt;p&gt;For now, the judge is able to judge based on one instance of gray code sequence. Sorry about that.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Analysis&quot;&gt;&lt;a href=&quot;#Analysis&quot; class=&quot;headerlink&quot; title=&quot;Analysis&quot;&gt;&lt;/a&gt;Analysis&lt;/h3&gt;&lt;p&gt;Let’s start from the simple case, assuming we are generating the Gray Code with only one bit.&lt;br&gt;Obviously, the result should be &lt;code&gt;[0, 1]&lt;/code&gt; which the binary representation would be, &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So let’s consider about one more complicated scenario, how about Gray Code with 2 bits? Well, we can reuse the result from case1.&lt;/p&gt;
&lt;p&gt;For case 1, we already know that the bit representation are &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;.&lt;br&gt;Now we are able to write the first two numbers for case 2,&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;00&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;01&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Apparently, the left most bit in next number should be &lt;code&gt;1&lt;/code&gt;, which we can write down the final result.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;00&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;01&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Actually in the 3rd and the 4th number, I just simply revese the result in case1, and set the left most bit to 1.&lt;br&gt;The interesting part is, why I need to reverse them? Well, the result generated by previous case, should also meet the Gray Code Standard.&lt;br&gt;And also we can copy all of them, and set the left most bit to 1. Then we will get the bit representations below,&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;00&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;01&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;But the result is wrong.&lt;/p&gt;
&lt;p&gt;From the 2nd case to 3rd number, there is a transformation. We flip the left most bit. So how can we make sure that won’t break the Gray Code standard?&lt;br&gt;Yes, reverse them.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;Integer&amp;gt; &lt;span class=&quot;title&quot;&gt;grayCode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n )&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    List&amp;lt;Integer&amp;gt; list = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;Integer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    list.add(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; size = list.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = size - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; j &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j--) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            list.add(list.get(j) | &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; list;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Conclusion&quot;&gt;&lt;a href=&quot;#Conclusion&quot; class=&quot;headerlink&quot; title=&quot;Conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h3&gt;&lt;p&gt;The tricky part of this problem is how to reuse the result which generate by previouse scenario. Once you get the idea of reversion, you get the key.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/TylerYang/leetcode/blob/master/89.GrayCode/Solution2.java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Implementation In Java&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Easy but this should be one of the most subtle problem in leetcode.&lt;/p&gt;
&lt;h3 id=&quot;Gray-Code&quot;&gt;&lt;a href=&quot;#Gray-Code&quot; class=&quot;headerlink&quot; title=&quot;Gray Code&quot;&gt;&lt;/a&gt;Gray Code&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;The gray code is a binary numeral system where two successive values differ in only one bit.&lt;/p&gt;
&lt;p&gt;Given a non-negative integer n representing the total number of bits in the code, print the sequence of gray code. A gray code sequence must begin with 0.&lt;/p&gt;
&lt;p&gt;For example, given n = 2, return [0,1,3,2]. Its gray code sequence is:&lt;/p&gt;
&lt;p&gt;00 - 0&lt;br&gt;01 - 1&lt;br&gt;11 - 3&lt;br&gt;10 - 2&lt;br&gt;Note:&lt;br&gt;For a given n, a gray code sequence is not uniquely defined.&lt;/p&gt;
&lt;p&gt;For example, [0,2,3,1] is also a valid gray code sequence according to the above definition.&lt;/p&gt;
&lt;p&gt;For now, the judge is able to judge based on one instance of gray code sequence. Sorry about that.&lt;br&gt;
    
    </summary>
    
      <category term="Interview" scheme="tyleryang.github.io/categories/Interview/"/>
    
      <category term="Leetcode" scheme="tyleryang.github.io/categories/Interview/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="tyleryang.github.io/tags/Leetcode/"/>
    
      <category term="Dynamic Programming" scheme="tyleryang.github.io/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>Scramble String - Leetcode</title>
    <link href="tyleryang.github.io/2016/04/13/Scramble-String-Leetcode/"/>
    <id>tyleryang.github.io/2016/04/13/Scramble-String-Leetcode/</id>
    <published>2016-04-13T13:02:26.000Z</published>
    <updated>2016-04-16T14:54:55.000Z</updated>
    
    <content type="html">&lt;p&gt;An interestring Dynamic Programming problem.&lt;/p&gt;
&lt;p&gt;Here is the question,&lt;/p&gt;
&lt;h3 id=&quot;Scramble-String&quot;&gt;&lt;a href=&quot;#Scramble-String&quot; class=&quot;headerlink&quot; title=&quot;Scramble String&quot;&gt;&lt;/a&gt;Scramble String&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.&lt;/p&gt;
&lt;p&gt;Below is one possible representation of s1 = “great”:&lt;/p&gt;
&lt;p&gt;  great&lt;br&gt;  /&amp;nbsp;&amp;nbsp;&amp;nbsp;\&lt;br&gt;gr    eat&lt;br&gt;/ \    /  \&lt;br&gt;g   r  e   at&lt;br&gt;          / \&lt;br&gt;         a   t&lt;br&gt;To scramble the string, we may choose any non-leaf node and swap its two children.&lt;/p&gt;
&lt;p&gt;For example, if we choose the node “gr” and swap its two children, it produces a scrambled string “rgeat”.&lt;/p&gt;
&lt;p&gt;   rgeat&lt;br&gt;  /    \&lt;br&gt; rg    eat&lt;br&gt;/ \    /  \&lt;br&gt;r   g  e   at&lt;br&gt;          / \&lt;br&gt;         a   t&lt;br&gt;We say that “rgeat” is a scrambled string of “great”.&lt;/p&gt;
&lt;p&gt;Similarly, if we continue to swap the children of nodes “eat” and “at”, it produces a scrambled string “rgtae”.&lt;/p&gt;
&lt;p&gt;   rgtae&lt;br&gt;  /      \&lt;br&gt; rg    tae&lt;br&gt;/ \    /  \&lt;br&gt;r   g  ta  e&lt;br&gt;      / \&lt;br&gt;     t   a&lt;br&gt;We say that “rgtae” is a scrambled string of “great”.&lt;/p&gt;
&lt;p&gt;Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Analysis&quot;&gt;&lt;a href=&quot;#Analysis&quot; class=&quot;headerlink&quot; title=&quot;Analysis&quot;&gt;&lt;/a&gt;Analysis&lt;/h3&gt;&lt;h3 id=&quot;Conclusion&quot;&gt;&lt;a href=&quot;#Conclusion&quot; class=&quot;headerlink&quot; title=&quot;Conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;An interestring Dynamic Programming problem.&lt;/p&gt;
&lt;p&gt;Here is the question,&lt;/p&gt;
&lt;h3 id=&quot;Scramble-String&quot;&gt;&lt;a href=&quot;#Scramble-String&quot; class=&quot;headerlink&quot; title=&quot;Scramble String&quot;&gt;&lt;/a&gt;Scramble String&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.&lt;/p&gt;
&lt;p&gt;Below is one possible representation of s1 = “great”:&lt;/p&gt;
&lt;p&gt;  great&lt;br&gt;  /&amp;nbsp;&amp;nbsp;&amp;nbsp;\&lt;br&gt;gr    eat&lt;br&gt;/ \    /  \&lt;br&gt;g   r  e   at&lt;br&gt;          / \&lt;br&gt;         a   t&lt;br&gt;To scramble the string, we may choose any non-leaf node and swap its two children.&lt;/p&gt;
&lt;p&gt;For example, if we choose the node “gr” and swap its two children, it produces a scrambled string “rgeat”.&lt;/p&gt;
&lt;p&gt;   rgeat&lt;br&gt;  /    \&lt;br&gt; rg    eat&lt;br&gt;/ \    /  \&lt;br&gt;r   g  e   at&lt;br&gt;          / \&lt;br&gt;         a   t&lt;br&gt;We say that “rgeat” is a scrambled string of “great”.&lt;/p&gt;
&lt;p&gt;Similarly, if we continue to swap the children of nodes “eat” and “at”, it produces a scrambled string “rgtae”.&lt;/p&gt;
&lt;p&gt;   rgtae&lt;br&gt;  /      \&lt;br&gt; rg    tae&lt;br&gt;/ \    /  \&lt;br&gt;r   g  ta  e&lt;br&gt;      / \&lt;br&gt;     t   a&lt;br&gt;We say that “rgtae” is a scrambled string of “great”.&lt;/p&gt;
&lt;p&gt;Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Interview" scheme="tyleryang.github.io/categories/Interview/"/>
    
      <category term="Leetcode" scheme="tyleryang.github.io/categories/Interview/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="tyleryang.github.io/tags/Leetcode/"/>
    
      <category term="Dynamic Programming" scheme="tyleryang.github.io/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>A.Counting Sheep - Google Code Jam 2016 </title>
    <link href="tyleryang.github.io/2016/04/10/Counting-Sheep-Google-Code-Jam-2016/"/>
    <id>tyleryang.github.io/2016/04/10/Counting-Sheep-Google-Code-Jam-2016/</id>
    <published>2016-04-10T05:34:31.000Z</published>
    <updated>2016-04-10T06:00:52.000Z</updated>
    
    <content type="html">&lt;p&gt;The first question in Google Qualification Round.&lt;/p&gt;
&lt;h3 id=&quot;Counting-Sheep&quot;&gt;&lt;a href=&quot;#Counting-Sheep&quot; class=&quot;headerlink&quot; title=&quot;Counting Sheep&quot;&gt;&lt;/a&gt;Counting Sheep&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Bleatrix Trotter the sheep has devised a strategy that helps her fall asleep faster. First, she picks a number N. Then she starts naming N, 2 × N, 3 × N, and so on. Whenever she names a number, she thinks about all of the digits in that number. She keeps track of which digits (0, 1, 2, 3, 4, 5, 6, 7, 8, and 9) she has seen at least once so far as part of any number she has named. Once she has seen each of the ten digits at least once, she will fall asleep.&lt;/p&gt;
&lt;p&gt;Bleatrix must start with N and must always name (i + 1) × N directly after i × N. For example, suppose that Bleatrix picks N = 1692. She would count as follows:&lt;/p&gt;
&lt;p&gt;N = 1692. Now she has seen the digits 1, 2, 6, and 9.&lt;br&gt;2N = 3384. Now she has seen the digits 1, 2, 3, 4, 6, 8, and 9.&lt;br&gt;3N = 5076. Now she has seen all ten digits, and falls asleep.&lt;br&gt;What is the last number that she will name before falling asleep? If she will count forever, print INSOMNIA instead.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Input&lt;br&gt;The first line of the input gives the number of test cases, T. T test cases follow. Each consists of one line with a single integer N, the number Bleatrix has chosen.&lt;/p&gt;
&lt;p&gt;Output&lt;br&gt;For each test case, output one line containing Case #x: y, where x is the test case number (starting from 1) and y is the last number that Bleatrix will name before falling asleep, according to the rules described in the statement.&lt;br&gt;Limits&lt;/p&gt;
&lt;p&gt;1 ≤ T ≤ 100.&lt;br&gt;Small dataset&lt;/p&gt;
&lt;p&gt;0 ≤ N ≤ 200.&lt;br&gt;Large dataset&lt;/p&gt;
&lt;p&gt;0 ≤ N ≤ 106.&lt;br&gt;Sample&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Input&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Output&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Case #1: INSOMNIA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Case #2: 10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Case #3: 90&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Case #4: 110&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1692&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Case #5: 5076&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In Case #1, since 2 × 0 = 0, 3 × 0 = 0, and so on, Bleatrix will never see any digit other than 0, and so she will count forever and never fall asleep. Poor sheep!&lt;/p&gt;
&lt;p&gt;In Case #2, Bleatrix will name 1, 2, 3, 4, 5, 6, 7, 8, 9, 10. The 0 will be the last digit needed, and so she will fall asleep after 10.&lt;/p&gt;
&lt;p&gt;In Case #3, Bleatrix will name 2, 4, 6… and so on. She will not see the digit 9 in any number until 90, at which point she will fall asleep. By that point, she will have already seen the digits 0, 1, 2, 3, 4, 5, 6, 7, and 8, which will have appeared for the first time in the numbers 10, 10, 2, 30, 4, 50, 6, 70, and 8, respectively.&lt;/p&gt;
&lt;p&gt;In Case #4, Bleatrix will name 11, 22, 33, 44, 55, 66, 77, 88, 99, 110 and then fall asleep.&lt;/p&gt;
&lt;p&gt;Case #5 is the one described in the problem statement. Note that it would only show up in the Large dataset, and not in the Small dataset.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;The first question in Google Qualification Round.&lt;/p&gt;
&lt;h3 id=&quot;Counting-Sheep&quot;&gt;&lt;a href=&quot;#Counting-Sheep&quot; class=&quot;headerlink&quot; title=&quot;Counting Sheep&quot;&gt;&lt;/a&gt;Counting Sheep&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Bleatrix Trotter the sheep has devised a strategy that helps her fall asleep faster. First, she picks a number N. Then she starts naming N, 2 × N, 3 × N, and so on. Whenever she names a number, she thinks about all of the digits in that number. She keeps track of which digits (0, 1, 2, 3, 4, 5, 6, 7, 8, and 9) she has seen at least once so far as part of any number she has named. Once she has seen each of the ten digits at least once, she will fall asleep.&lt;/p&gt;
&lt;p&gt;Bleatrix must start with N and must always name (i + 1) × N directly after i × N. For example, suppose that Bleatrix picks N = 1692. She would count as follows:&lt;/p&gt;
&lt;p&gt;N = 1692. Now she has seen the digits 1, 2, 6, and 9.&lt;br&gt;2N = 3384. Now she has seen the digits 1, 2, 3, 4, 6, 8, and 9.&lt;br&gt;3N = 5076. Now she has seen all ten digits, and falls asleep.&lt;br&gt;What is the last number that she will name before falling asleep? If she will count forever, print INSOMNIA instead.&lt;br&gt;
    
    </summary>
    
      <category term="Interview" scheme="tyleryang.github.io/categories/Interview/"/>
    
      <category term="Google Code Jam" scheme="tyleryang.github.io/categories/Interview/Google-Code-Jam/"/>
    
    
      <category term="Algorithm" scheme="tyleryang.github.io/tags/Algorithm/"/>
    
      <category term="Google Code Jam" scheme="tyleryang.github.io/tags/Google-Code-Jam/"/>
    
      <category term="Google Code Jam 2016" scheme="tyleryang.github.io/tags/Google-Code-Jam-2016/"/>
    
  </entry>
  
  <entry>
    <title>Value of Values - Tech talk by Rich Hickey</title>
    <link href="tyleryang.github.io/2016/04/07/Value-of-Values-Tech-talk-by-Rich-Hickey/"/>
    <id>tyleryang.github.io/2016/04/07/Value-of-Values-Tech-talk-by-Rich-Hickey/</id>
    <published>2016-04-07T04:32:37.000Z</published>
    <updated>2016-04-12T01:34:34.000Z</updated>
    
    <content type="html">&lt;p&gt;The transcript of &lt;strong&gt;Value of Values&lt;/strong&gt; – Rich Hickey.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=-6BsiVyC1kM&amp;amp;list=PLRZ9CBXkZGmPtdCa8veT_fa5auxuI-BKi&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Video&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So the value of values, who here works in IT.&lt;br&gt;What is that mean? What is it stand for IT?&lt;/p&gt;
&lt;p&gt;Information technology. So what do we mean when we say information? As you may know for my other keynote, all I want to make my&lt;br&gt;keynotes is like, use my dictionary, is my dictionary has all the answers. My dictionary says information is base on the word inform, which means&lt;br&gt;to convey knowledge via facts and the purpose of that is to give shape to the mind. And information is just those facts.That is what&lt;br&gt;information is. Information is fact.&lt;/p&gt;
&lt;p&gt;So what is a fact? A fact is the place where information store. And what is great about that is there is a place for every piece of information.&lt;br&gt;And facts are operation, like get and set and they may have other operations. And those operation control how facts can change.&lt;br&gt;The other great things about fact is it’s easy to convey them.To convey a fact we just convey its location.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;How many people are uncomfortable right now? I am, this is not true, right? This is wrong. Everything I just said is wrong.Dead wrong,&lt;br&gt;and you should be uncomfortable.This is not the facts are.&lt;/p&gt;
&lt;p&gt;So our facts are places, well, what’s the place? Again back to the dictionary, a place is a particular portion of space. And the space is a more&lt;br&gt;important word, we gonna dig into later.And in particular the part of the place that matters are the fact it’s sort of delimited. right? There is&lt;br&gt;the specificity to location, name via place or vice versa. And we know about places, we have good examples of places of everyday work in progarming.&lt;br&gt;Memory address are places, disk sector are places. Addresses, we can go to them, substitude their content with other content.And we are very familiar with&lt;br&gt;this notion of place. And i think it’s quite  important to think about whether or not with this memory address in this location we are actually building&lt;br&gt;information systems that earn about information we just find it. ??&lt;br&gt;In particluar, we use memory and we use objects, typically, specially at this contents. And mutable objects are nothing more than abstraction over places.&lt;br&gt;their little abstraction over places. Specially, well in partically the mutable objects.and they have methods just like the thing I talk before about fact.&lt;br&gt;having methods object have methods. And this is the core thing we are building systems on it. On the other side, on the durably side, we have same kind of notion.&lt;/p&gt;
&lt;p&gt;we have tables documents, records, all of them have the places. all of them have update inotaion, the notion of going into the place and set it into a new value .&lt;br&gt;These are the undependings from which we build systems. but we are sort of making abstraction on top of them.But don’t hide what they are about.&lt;/p&gt;
&lt;p&gt;And I have word for this or term for this, I call it PLOP, Place oriented programming. Which is what this is. And you can tell what’s going on.Because everytime the new&lt;br&gt;information replace old information.You are doing the place oriented programming.There are some reasons we are doing the place-oriented programming. Because way back the&lt;br&gt;early days of computers, we have to do place oriented programming. I saw a guy stills gave a great talk is talking about working you konw, building the great system&lt;br&gt;on computer that have 4 kilo words of memory.And every piece of memory, you knew the address, she know the even number of memory started at 2000 or use for jump table.&lt;br&gt;The number of the address here are use for data And other part of the memory here are use for code.Sometimes it used for more than one thing, for example, right now,&lt;br&gt;no one use this for code we can use it for data, vise versa. You have to do it. right, there isn’t enough compacity to do anything else. Computer memory is really small.&lt;br&gt;dist is very small.everything is very expensive, so we adopt it an approach to programming that was base around the manipulation of palces, totally make sense. And the keyword,&lt;br&gt;they are in the key aspect it make sense, it used to make sense, those limitations are gone. In the time I’ve been doing the programming, the capacity of these two have&lt;br&gt;increase a million faults. A MILLION FAULTS! What other thing in life, you know, have the same fact about it? Remain true when the sides of something change by a million fault.&lt;/p&gt;
&lt;p&gt;Magic trick call was million times bigger than this. What rules would still be applyed? What characters would still be true?&lt;br&gt;But yet, we are retaining decision that make thing much much smaller. And moving forward with them.&lt;/p&gt;
&lt;p&gt;So why is PLOP still rules? The key question here. Right? we are talking about the Place-oriented programming, we often talk about the two things, memory and records.&lt;br&gt;these have meanning before we have computer, and we are taking them over. We said, memory means addresses in RAM chips, records mean you konw slots in database’s tables. And worse&lt;br&gt;than just taken over these words, coz obviously there is limitions to these words in the analogies roughly whole,right? &lt;/p&gt;
&lt;p&gt;The problems is we’ve now been doing this for so long. We believe that our own myths about what this is mean. But we should go back to the fact of memory of method right?The fact&lt;br&gt;of memory is that it’s open system. If your friend gets a new email address, right? That doesn’t go into your brain. And find your friend’s email address cell and replace the email&lt;br&gt;address in that part you know that’s no ruins in your brain. That’s not how brains work.that’s not how memory works. Memory essentially and open system, and associated system.&lt;br&gt;It is not an addressed base system.&lt;/p&gt;
&lt;p&gt;Same thing, record keeping. We use to keep record before we have computers. What do we do?You know we took out the stone tablet and chew all the things,&lt;br&gt;we took out the pepile and wrote things down. When we have new information, what do we do? We didn’t go and lect smooth over the marble and choose the new stuff. We didnt’ go the prepiles? and&lt;br&gt;take out a racers and things like that. People build and accounting systems, they didn’t use the racer either. What they use double entry ccounting, ledger based countting. They only&lt;br&gt;make correcting entries. They did not go back with the racers. Not the way things work before we had computers.So this talk is about values.&lt;/p&gt;
&lt;p&gt;So another term we should define, And again, we just go back to the dictionary. There are some interesting definitions for value. Right? First is relative worth. And relative is end up being very&lt;br&gt;critical aspect for values. right, because the next thing is the one we probally most familiar with especially in computers. Right, coz this next definition is the one applies to like 42 right. it’s&lt;br&gt;a magnitude it’s a number. it’s something we use to measure somethign else. Nah notion of value, I think it’s the one we mostly readily able to adapt. And again, the bigger notion of value is about&lt;br&gt;meanning and comparability and about relative worth. That’s the bigger notion of value, because when you measure something, you have to measure in term of something else. It does absolute measurement.&lt;/p&gt;
&lt;p&gt;Some the comparsion part is important, So the question right now is, is String a value? How many people give this?(raise the hand)  I love doing the answer the question by rasing the hands, but not everybody has&lt;br&gt;the hands, appearantly. How many people think string is not a value. How many people think it depends? You always wait for the depends ? right? that’s the best answer. You hold that for it.Right? what is&lt;br&gt;it depends on?&lt;br&gt;Is it immutable ?right? if the string is mutable, it’s a value, if the string is immutable, it’s not a value. How many people work the programming language would still do what string is mutable?&lt;br&gt;How many people want to go back? No, we don’t like this. And it ends up that, this equality notion of value, coz right now, the string doesn’t measure something right? It’s not manitude or amount, it doen’t&lt;br&gt;correspond to that definition.But it ends that the mutable string is a comparable thing. And comparability is where we derive our ability to do logic. and to make decision. And to we can say, is this&lt;br&gt;the same was yesterday? is it greater or less than what it was ? Is the string label this thing correctly you know according to my understanding of it. Or anything we do, with information. That comparability and&lt;br&gt;equality test sort of bottom, now goes back to another notion of value. We really don’t want to go back.&lt;/p&gt;
&lt;p&gt;So now we want to sort of talk about the values, it’s not from the dictionaly definition.  but very  specifically, in term of what we do in programming. And there are lot’s of new answer to this spec de? the purpose&lt;br&gt;to this talk if giving it half an hour. I’m just gonna to focus on two, valuls are immutable, and values are semantically transparent. And the purpose of the values is it expose to you, so that you can do the&lt;br&gt;comparasion and equality test. Values is not about ecapsulate something into your method, and doing thing. The value is saying, compare me to something else.I’m telling you what my precise meaning and signicant is.&lt;br&gt;Significant is write on the label, write on the outside. &lt;/p&gt;
&lt;p&gt;So the reason give this talk about is the value propositions of values. what makes values good.originally this talk is going to be an hour long , so this is gonna to be a little bit fast. But there’s bunch of characteristics&lt;br&gt;that the value are valuable.The first is the value can be shared. Right, if you have the value, you have the immutable thing. Can you give it to somebody else and not worry?Yes, you don’t have to worry. Do they have to&lt;br&gt;worry about you now , coz both of you are sharing the same value. Anybody have to worry?No. So the value can be shared, that’s very very valuable.&lt;/p&gt;
&lt;p&gt;Value supports reproducible results. Right, if you define a function in terms of value. Everytime may call that function you get the same answer. Yes. if you define a fucntion in terms of places. Everytime you run that function&lt;br&gt;you will get same answer ? NO! Right? in terms of what’s is the place ? Right? reproducible result really matters.They allow you to run tests. And reproducible tests. How many people now runnig test now in places? They can’t&lt;br&gt;tell you anything. Can’t tell you anything, they all contional on your ability to bring that ‘place’ to the same place. To the same value. Another critical aspect to value is that they are easy to fabricate, you can make up&lt;br&gt;the values from scratch in any progaramming language quite readily. Can you make a string in any programming language? yes. Can you make a list of string? sure. list of number, yes ,list of list of numbers, a map of list of numbers.&lt;br&gt;yes. can I make it insance of your fancy interface in any other language?No, it’s not easy to fabracate that, it’s not easy to make programs that write programs. it’s not easy to write program that write tests, if your progarms&lt;br&gt;are not based around values. So the fact that those are easy to fabricate is important. &lt;/p&gt;
&lt;p&gt;Alright, values are language independent.So I just talk about that already. The notion of string or number or map.This has noting to do with the programming language. The thing I just said, nothing at all right?Nor any of the aggregate those&lt;br&gt;things have nothing to do with that. They are generic.These ideas, the notion of values are generic.And I think it’s somehing that we don’t thing about of another in our programming designed to our system, but the actual cost of specificity.&lt;br&gt;We love specificity, we use java every new idea gets a new class.Every new thing gets a new thing. What’s the cost that happen? You get this explosion of code  just a tremendous explosion of code.&lt;br&gt;obvious was worth suport revies the exact opposite thing especially in type languages. You get very little reuse coz you make a new thing every time.&lt;br&gt;And what is more code mean? More code equal more bugs. Another interesting thing about values is value are aggrigate to values. This is something I really want you to focus on. We talk about the 42, we talk about the string, we talk about the&lt;br&gt;atomic thing.But the list of immutable things. it’s itself and immutable thing, so on and so forth. As you build aggrigates, those bigger things are also values. And I think we tend to stop, we say of course strings to be immutable. But the&lt;br&gt;immutable collections, booo (no, I don’t want it), I can’t even comprehend it. But you should, right? It has all the same desirable attributes that the immutable string did. nobody here wants program with mutable strings anymore. Why do you&lt;br&gt;want program with mutable collections anymore. You shouldn’t. And is really important a benefits you get from doing this.For instance, compare to object if you have an object and you want to share, what do you have to do?  Right? just find the object&lt;br&gt;find the interface,  then you have to do what? What if in concurrent environment, what do you have to have to that object? Some sort of locking policy ? right? very very  difficulte thing in fact a lot of languages don’t give you any rsources to&lt;br&gt;define it well. But if you done that, and there’s also other kind of the problems, like how do you copy it? What is the cloning sematic? Once you done that work, you done that work for every of your classes.And now you build something that is composite&lt;br&gt;of those things. Do you get a lock policy for combinding them? No! It all falls away, you have do all over again. This composite for all these things for which I have lock policy, now no longer have a lock policy, I have to come up with the new one. has&lt;br&gt;come up the new cloning policy , and everything else do over again. &lt;/p&gt;
&lt;p&gt;Values aggregates to values, all the benefits apply to aggregate. There are other benefits we get from aggregate, we see this all the time. Values are easy to convey. If I have a piece of information I think it’s useful. I can send you that values, and&lt;br&gt;I’ve know I have communicated to you what I was seeing, if I see something interesting and I communicate to you the place where I say what I actually convey to you?Nothing, not the information that’s for sure. Coz you go to that place, you saw totally&lt;br&gt;different thing than what I saw. It works in other way as well. When I wanna perceive something. If it’s a value I could take my time and look at it, right? especially for the set of values, right, if it’s composite thing. 16:58 If I want to perceive&lt;br&gt;something that base round places, how do we do that? It’s a bunch of places I want to look at it. What do we have to do? I have stop the world. Please stop, while I look at this places, because otherwise I have look at one and turn my head to others,&lt;br&gt;something might change by the time I got to absorb in perceive the whole thing. I don’t know they have any other thing consistent? &lt;/p&gt;
&lt;p&gt;And this also go to the memory, how do you remember anything?If you encounter an object during the course of your programming running and you want to remember it, what do you do? You just store the reference? Not good enough, right? What do you have to&lt;br&gt;do? Clone it! How do you do that? It depends. &lt;/p&gt;
&lt;p&gt;The other what you do sort thing in bigger, bigger than your box, bigger than your process, right? Coz this value proposition extend to your system, and in particular, values make the greatest interface, now here, I don’t think we have any arguments. I&lt;br&gt;think we already doing this, right? what do you send around the wires? Anybody is using corebug?decone? Nooo, they die for good reasons. We now use values, we send around the json or xml. youkonw, you haveto, both are representations of values.That allows&lt;br&gt;easy to build interfaces thing that allow to change in both ends.The other aspect to values is very interesting especially in the large but it’s also chewing the small. We talk about how do we perceive something I have to lock the world down. That apply&lt;br&gt;to the large as well, how many ever heard the retransaction? Yeah.. how many people like retransaction? No..! The whole idea is counter-intuitive and violates physics.(contrary to intuition or to common-sense expectation) .right? In physics, we just look&lt;br&gt;at each other, we don’t have to stop everything in orther to look at them. So when we are programming in values and especially in storage, we again reduce the coordination. And another benefits we can get is location flexibility, right? If in the small,&lt;br&gt;you build the system, and the system is define in terms of processes that communicate in values, and in your side, you said, you know what, that part of system, I want to rewrite them in a faster language, or I want to run that in a different bar. Is that&lt;br&gt;straight forward to do if you are using the object or specific things related to your programming language by passing java interfaces rewrite, or let’s say ruby. rewrite that in java. No, you konw we don’t do it in a large, right? In the large, we don’t&lt;br&gt;do this thing, in the large, we communicate values, but in smaller programming languages, we start doing icky thing, and that icky thing keep us from being able to move stuff, we can’t move them to another thread, we can’t move it to another languages,we&lt;br&gt;can’t move it to another bar. But if we are using values, we can. We call it location flexibility.&lt;/p&gt;
&lt;p&gt;So, let’s get back to information technology, the fact of facts, so the first fact about facts, is that facts are values, right? they are not, they are not places. Right? that slide afront is a lie. Everything sitting there and saying, don’t facts change?&lt;br&gt;Don’t we have president one time and have new president? No! They don’t. Because fact incorporate time. How is that, what is that mean? Again, the dictionary knows everything. Because what is fact mean? Fact means something that happened, something known to&lt;br&gt;have happened or exist. It comes from Latin. And it comes from participle Latin. that means something that happened. A fact that something that happen.It’s not a place, it’s not something you can change.Right? Bill Clinton was president. The fact that he used&lt;br&gt;to be president will always be a fact. We can have a new president, that is a new fact, just like you can have new email address. &lt;/p&gt;
&lt;p&gt;The other thing about fact, is that, it’s important when you consider facts that is insufficient for you consider recent facts, and again we will get back to the whole point of information, right.&lt;br&gt;Information is a form that people can convey konwledge. But knowledge derive from facts. When we try to make decisions, we compare times, we compare two different things, we combind facts. And especially when we use different time point, imgine if you only&lt;br&gt;knew the present value of any property of attribute in the world. How good would your decision make capability thing? It will be awful, it will be absolutly terrible. And yet we are build the system that only knew the resent facts, we don’t konw anything else.&lt;br&gt;We are suppose to making information and decision support system. Right? So the bottom is you cannot update the facts. Right? And the reason that you cannot update the fact is you cannot change the past. That’s what facts are, the documents of past. So let’s&lt;br&gt;go back and revisit. What is it mean to build the information system that about the information. It will mean that the system will be fundatmenal about facts. It will be about maintaing the facts, and manupulating the facts.And presenting the facts to the users&lt;br&gt;to give them leverage. So they can make desicion, we think we are doing this, right? When we are in information technologies, we think we are building system that are decision support system. But we are not using the infrastructure that fact oriendted. Right?&lt;/p&gt;
&lt;p&gt;In the most bottom notion, before getting the temple acpect to facts. We should certainly be building system that are value oriented. But that’s not to say the programing language shouldn’t have the process oriented construct. Of course it should. But we don’t&lt;br&gt;distinguish them, right. If we are looking any program sort of have tha two different parts. Right? That’s gonna be part of your progarm that looks like a machine.Right? That’s gonna loading dock, stuff comes in, you put on the convey belt, it moves, and it gets&lt;br&gt;sorted and get splited and some stuff goes in here some stuff goes to there.Right? All progarm have the aspect themselves, which is process-oriented. And it’s sort like a machine.Right? And we build programming language that allows us the use the construct the&lt;br&gt;analogous to a little machine, they do stuff. The problem is, we apply the technology to everything, including to information, and information is not a little machine, it’s not at all like a machine. And they have to sperate out this process constructs. And in&lt;br&gt;particular one big take away should be the place.Oriented construct place, HAVE NO ROLE AT ALL in information model. They are artifacts of the way of computer to work. They have noting to do with the way your program should be accomplish. If your software suppose&lt;br&gt;to be accomplishing information management and decision support. So one of the greatest thing about this talk, is, I think you all already know this. Because we do decision making, right? We know what it takes to support our decision making. We are constantly&lt;br&gt;comparing the present to the past. We are trying to spot trends. We are tring to see the way it changes. We need to add stuff up that happended overtime. We almost always need a temporal aspect. So how can I tell u this is true? Well,it’s really staight forward.&lt;br&gt;We are programmer, we have stuff to do, we have our own businesses, right? We make stuff, what do we make? What we actually concrete our artifact?We make source code, right?And them we have operation aspect to what we do. What do we do? We run our program, and&lt;br&gt;we maintain all these information for both of these thing.&lt;/p&gt;
&lt;p&gt;Let’s look at programmer IT. Let’s look at our own IT System. The one we build for our ownselves. Source Control, is it update the place. How many people are using a directly on the file system for source control.And when you have new edited to your program, you&lt;br&gt;just added it to your directory. You really don’t wanna raise your hand. No, of course not, it’s not update in the place. How do we possible know what we are doing? How do we possibly making desicion of what we do to run our little software business. If we didn’t&lt;br&gt;have this information? NO WAY.&lt;/p&gt;
&lt;p&gt;What about the operation IT? We run our system, what do we do when we running our system, we log log and log. We keep track everything that happening, right? Anybody is using the update in place log? Anybody use the log that last lattency was five? NO! Anybody use&lt;br&gt;the log that didn’t put timestamp in the entry? NO, OF COURSE NOT. How can we possibly understand what our system was doing? If we didn’t have this information? How can we make decisions? We know, there’s no way. No way, so we don’t do this.&lt;/p&gt;
&lt;p&gt;So, BIG data. it’s all connected. what is big data? I would contemp that a sort of big data is in this, its business telling programmers, that the database you have, I like more that the one you gave me, coz the one you gave me, only remember the last thing I told&lt;br&gt;it. And your database your logs, they konw everything happen in our business. You konw everything.If time is everything, let’s go mine now.find some good business decision-making information coz my database doesn’t have it. It doesn’t remember anything other than&lt;br&gt;the last thing. The lockable information, the lock set the timesets.? But I think it’s really sort of shame here. Because we are being reactive in this area. Mining logs, we know much better to represent information. We konw how to store information in the way that&lt;br&gt;laveragabel. Right? Logs are not that. Map reduce over the logs are not that. Logs are full of crap. Lots of program operation in itself. For the business data in there, we have use database to store that. But that’s alright, that’s not our fault. So we are now moving&lt;br&gt;in to, what I say, the space age.&lt;br&gt;One more definition, space, the unlimited expance in which all things are loacated and all events occur. What’s really interesting about the space definition is that, it has always, you go to the oldest definition in the oldest languages, the space definition always,&lt;br&gt;corporated both place and time. It’s never been apply to only one of those two thing. Always connected to, and there is certain busy aspect to that. So, if new never fail, you can call new day after day, 24 for 7 over and over again, you are not running in the place,&lt;br&gt;you are running in space. You are not seeing the edge of thing, you are not delimited. You need new stuff, you get it. If S3 never fills up, that’s not the cloud, that’s space, right? Everytime you want to put a file into S3, it says sure. Are we worry about the edge&lt;br&gt;of it? Most of the time, we don’t worry about the edge of space.Maybe you do, I&lt;br&gt;don’t&lt;/p&gt;
&lt;p&gt;So, information system should have different approach. Should say that, new fact require new space, this should be the end of place oriented programming,  we have this&lt;br&gt;if you can afford this, why would you do anythign else. Anybody feel like I&lt;br&gt;wish I can lock, but I can’t? Coz this gonna take five mega bytes. Anybody have&lt;br&gt;five megabytes disk, cost thounsand of dollors? It’s not that way anymore,&lt;br&gt;right?&lt;br&gt;So you can afford to do this. Lots of interesting thing would happen when you&lt;br&gt;take this approach. Allow this thing happen in memory with garbage&lt;br&gt;collections gonna happen what storage. right? They would be garbage.&lt;br&gt;But that’s ok, these things we would learning how to manage.&lt;/p&gt;
&lt;p&gt;So, to summarize.  Unfortunality, I think we continue to use the place-oriented programming. Our reshioanl(?) are gone.&lt;br&gt;The sadder thing is is, we continue to make new things are like this, brand new paogramming languages and brand new databases.&lt;br&gt;that still take this approach.Still use the place-orientation. That’s been&lt;br&gt;invalid for at least decade but certainly for the last five years. The reshion&lt;br&gt;is gone.&lt;br&gt;We are missing out on all those benefits I listed before.And I can talk to you&lt;br&gt;on any of that benefit one hour, there’s a huge number of benefits to using&lt;br&gt;values. We recognizing them, look at our information system that used for your&lt;br&gt;self, we are proving we already know this. We don’t overide our logs, we don’t&lt;br&gt;override our source control. We are in the space age for ourselves. We need to&lt;br&gt;be in the businesses or supporting, right?There’s definitly demand for this,&lt;br&gt;this whole data push, and mining logs and everything else in tracking&lt;br&gt;everything and keeping the time and everything. Business know the tremedous&lt;br&gt;value here, they want it to divide this quite obvious. We have the resources&lt;br&gt;to do it, and I think that the challenge is to make sure that we do, and what I&lt;br&gt;recommend is that you try to take an information oriented approach to the way&lt;br&gt;to build your program. Thx.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;The transcript of &lt;strong&gt;Value of Values&lt;/strong&gt; – Rich Hickey.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=-6BsiVyC1kM&amp;amp;list=PLRZ9CBXkZGmPtdCa8veT_fa5auxuI-BKi&quot;&gt;Video&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So the value of values, who here works in IT.&lt;br&gt;What is that mean? What is it stand for IT?&lt;/p&gt;
&lt;p&gt;Information technology. So what do we mean when we say information? As you may know for my other keynote, all I want to make my&lt;br&gt;keynotes is like, use my dictionary, is my dictionary has all the answers. My dictionary says information is base on the word inform, which means&lt;br&gt;to convey knowledge via facts and the purpose of that is to give shape to the mind. And information is just those facts.That is what&lt;br&gt;information is. Information is fact.&lt;/p&gt;
&lt;p&gt;So what is a fact? A fact is the place where information store. And what is great about that is there is a place for every piece of information.&lt;br&gt;And facts are operation, like get and set and they may have other operations. And those operation control how facts can change.&lt;br&gt;The other great things about fact is it’s easy to convey them.To convey a fact we just convey its location.&lt;/p&gt;
    
    </summary>
    
      <category term="Tech talk" scheme="tyleryang.github.io/categories/Tech-talk/"/>
    
      <category term="Functional Programming" scheme="tyleryang.github.io/categories/Tech-talk/Functional-Programming/"/>
    
    
      <category term="Tech talk" scheme="tyleryang.github.io/tags/Tech-talk/"/>
    
      <category term="Functional Programming" scheme="tyleryang.github.io/tags/Functional-Programming/"/>
    
      <category term="Rich Hickey" scheme="tyleryang.github.io/tags/Rich-Hickey/"/>
    
  </entry>
  
  <entry>
    <title>Edit Distance - Leetcode</title>
    <link href="tyleryang.github.io/2016/04/02/Edit-Distance-Leetcode/"/>
    <id>tyleryang.github.io/2016/04/02/Edit-Distance-Leetcode/</id>
    <published>2016-04-02T12:11:00.000Z</published>
    <updated>2016-04-16T13:06:02.000Z</updated>
    
    <content type="html">&lt;p&gt;Pretty classical DP problem. I didn’t figure it out last year.&lt;/p&gt;
&lt;p&gt;This time did!&lt;/p&gt;
&lt;h3 id=&quot;Edit-Distance&quot;&gt;&lt;a href=&quot;#Edit-Distance&quot; class=&quot;headerlink&quot; title=&quot;Edit Distance&quot;&gt;&lt;/a&gt;Edit Distance&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given two words word1 and word2, find the minimum number of steps required to convert word1 to word2. (each operation is counted as 1 step.)&lt;/p&gt;
&lt;p&gt;You have the following 3 operations permitted on a word:&lt;/p&gt;
&lt;p&gt;a) Insert a character&lt;br&gt;b) Delete a character&lt;br&gt;c) Replace a character&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Analysis&quot;&gt;&lt;a href=&quot;#Analysis&quot; class=&quot;headerlink&quot; title=&quot;Analysis&quot;&gt;&lt;/a&gt;Analysis&lt;/h3&gt;&lt;p&gt;For the problem that conform to the characteristics of &lt;strong&gt;Dynamic Programming&lt;/strong&gt;, we need to figure out how to split a big problem into several smaller ones.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;state&lt;/strong&gt; and the &lt;strong&gt;transition&lt;/strong&gt; are the keys to solve the DP problem.&lt;/p&gt;
&lt;p&gt;Assuming we want to convert the word1 &lt;code&gt;&amp;quot;a&amp;quot;&lt;/code&gt; to word2 &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;. Obviously, it will take one step.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;a&amp;quot; =&amp;gt; &amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;From the word1 &lt;code&gt;&amp;quot;a&amp;quot;&lt;/code&gt; to word2 &lt;code&gt;&amp;quot;c&amp;quot;&lt;/code&gt;, it will also take only one step.&lt;/p&gt;
&lt;p&gt;How about convert &lt;code&gt;ab&lt;/code&gt; to &lt;code&gt;b&lt;/code&gt;? Well, from prev conversion we know the minimum step is &lt;strong&gt;one&lt;/strong&gt;. And the last character of word1 equals to word2’s last character. So that means we don’t need to do anything. The answer is still one.&lt;br&gt;What if the word1 is &lt;code&gt;ab&lt;/code&gt; and word2 is &lt;code&gt;c&lt;/code&gt;? The available substeps would be,&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;ab&amp;quot; = &amp;quot;a&amp;quot; =&amp;gt; &amp;quot;&amp;quot; + &amp;quot;b&amp;quot; =&amp;gt; &amp;quot;c&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;or&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;ab&amp;quot; = &amp;quot;a&amp;quot; =&amp;gt; &amp;quot;c&amp;quot; + &amp;quot;b&amp;quot; =&amp;gt; &amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;For each substep we can get the answer base on the previous sub-answers.(The transition from &lt;code&gt;&amp;quot;a&amp;quot;&lt;/code&gt; to &lt;code&gt;&amp;quot;c&amp;quot;&lt;/code&gt; or from &lt;code&gt;&amp;quot;a&amp;quot;&lt;/code&gt; to the empty character.)&lt;/p&gt;
&lt;p&gt;So for longer string word1 &lt;code&gt;abc&lt;/code&gt; to word2 &lt;code&gt;bc&lt;/code&gt;, we can write down the 2D matrix blew,&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//the - stands for empty character&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - a b c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- 0 1 2 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Then we know, from w1 to w2, it can be form in these sub-steps,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;w1.substring(0, w1.length - 1) and w2.substring(0, w2.length - 1) =&amp;gt; w1 and w2&lt;/li&gt;
&lt;li&gt;w1 and w2.substring(0, w2.length - 1) =&amp;gt; w1 and w2&lt;/li&gt;
&lt;li&gt;w1.substring(0, w1.length - 1) and w2 =&amp;gt; w1 and w2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And we choose the minimum sub-steps everytime then we will be able to write down the pseudo code below,&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if (w1.charAt(i) == w2.charAt(j)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dp[i][j] = dp[i - 1][j - 1];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - 1], dp[i][j - 1]) + 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/TylerYang/leetcode/blob/master/72.EditDistance/Solution.java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Here is the full version java implementation.&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Conclusion&quot;&gt;&lt;a href=&quot;#Conclusion&quot; class=&quot;headerlink&quot; title=&quot;Conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h3&gt;&lt;p&gt;The states and the transtion between them are the keys to solve the DP problem. Though it will be diffcult to figure out the transition part.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Pretty classical DP problem. I didn’t figure it out last year.&lt;/p&gt;
&lt;p&gt;This time did!&lt;/p&gt;
&lt;h3 id=&quot;Edit-Distance&quot;&gt;&lt;a href=&quot;#Edit-Distance&quot; class=&quot;headerlink&quot; title=&quot;Edit Distance&quot;&gt;&lt;/a&gt;Edit Distance&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given two words word1 and word2, find the minimum number of steps required to convert word1 to word2. (each operation is counted as 1 step.)&lt;/p&gt;
&lt;p&gt;You have the following 3 operations permitted on a word:&lt;/p&gt;
&lt;p&gt;a) Insert a character&lt;br&gt;b) Delete a character&lt;br&gt;c) Replace a character&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Interview" scheme="tyleryang.github.io/categories/Interview/"/>
    
      <category term="Leetcode" scheme="tyleryang.github.io/categories/Interview/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="tyleryang.github.io/tags/Leetcode/"/>
    
      <category term="Dynamic Programming" scheme="tyleryang.github.io/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>Candy - Leetcode</title>
    <link href="tyleryang.github.io/2015/08/11/Candy-Leetcode/"/>
    <id>tyleryang.github.io/2015/08/11/Candy-Leetcode/</id>
    <published>2015-08-11T12:30:50.000Z</published>
    <updated>2016-04-02T12:16:04.000Z</updated>
    
    <content type="html">&lt;p&gt;This is a very interesting question and it have a bunch of corner cases that we need to consider. (It takes me more than 5 hours to solve it at the first time.)&lt;/p&gt;
&lt;h3 id=&quot;Candy&quot;&gt;&lt;a href=&quot;#Candy&quot; class=&quot;headerlink&quot; title=&quot;Candy&quot;&gt;&lt;/a&gt;Candy&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;There are N children standing in a line. Each child is assigned a rating value.&lt;/p&gt;
&lt;p&gt;You are giving candies to these children subjected to the following requirements:&lt;/p&gt;
&lt;p&gt;Each child must have at least one candy.&lt;br&gt;Children with a higher rating get more candies than their neighbors.&lt;br&gt;What is the minimum candies you must give?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Analysis&quot;&gt;&lt;a href=&quot;#Analysis&quot; class=&quot;headerlink&quot; title=&quot;Analysis&quot;&gt;&lt;/a&gt;Analysis&lt;/h3&gt;&lt;p&gt;In a word, the higher rating value you get than your neighbors, the more candies you should get.&lt;/p&gt;
&lt;p&gt;Considering the rating array below,&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[1, 2, 3]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;the output should be &lt;code&gt;6&lt;/code&gt;. This is because the first child have 1 candy, and the next should have 2 candies according to his rating value. It’s easy to get the value.&lt;/p&gt;
&lt;p&gt;How about two child are getting same rating value? For example, for &lt;code&gt;[1, 2, 2, 2]&lt;/code&gt; the right answer is &lt;code&gt;4&lt;/code&gt;. &lt;strong&gt;Children with a higher rating get more candies than their neighbors.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One important thing in solving this problem is, we want to give the minimum candies. This means each time we get a peek rating value, the next child can only have 1 candy until we meet the third child whose rating value is lower than the 2nd one.&lt;/p&gt;
&lt;p&gt;Consider the array below,&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ratings [1, 2, 6, 5, 4, 3, 2]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   i     0  1  2  3  4  5  6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;When we meet the first child(i: 0). We give only 1 candy to him. So now our &lt;code&gt;totalCandies&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;.&lt;br&gt;And then the second, the third child we can just simply repeat the same process. Then we update our &lt;code&gt;totalCandies&lt;/code&gt; in this way.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; ratings     [1, 2, 6, 5, 4, 3, 2]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    i         0  1  2  3  4  5  6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;totalCandies  1  3  6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Next we meet the 4th child(i: 3), because we know the previous child have the same rating value, so we can simply give only one candy to this child. And then we update our &lt;code&gt;totalCandies&lt;/code&gt;.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; ratings     [1, 2, 6, 5, 4, 3, 2]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    i         0  1  2  3  4  5  6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;totalCandies  1  3  6  7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;We meet the 5th child now(i: 4), we can give only 1 candies to him, but we need to give the previous child one more candy for compensation. So update our &lt;code&gt;totalCandies&lt;/code&gt;.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; ratings     [1, 2, 6, 5, 4, 3, 2]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    i         0  1  2  3  4  5  6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  candy       1  2  3  2  1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;totalCandies  1  3  6  7  9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;As for compensation, another question to this is, when we should give one more candy to the peek child?(i: 2) Appearently when our candy gap is smaller than our position gap, we need to give one more candy for compensation. For example, when we meet the 6th child, our candy gap is &lt;code&gt;3 - 1 = 2&lt;/code&gt;, the position gap is &lt;code&gt;5 - 2 = 3&lt;/code&gt;. So at this moment, we need to &lt;code&gt;totalCandies++&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; ratings     [1, 2, 6, 5, 4, 3, 2]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    i         0  1  2  3  4  5  6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  candy       1  2  4  3  2  1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;totalCandies  1  3  6  7  9  13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/candy/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Here is the Candy in leetcode oj.&lt;/a&gt;&lt;br&gt;Here is implementation,&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;candy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] ratings)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(ratings.length &amp;lt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ratings.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; totalCandies = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, prevCandy = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, peekPos = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, peekCandy = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; ratings.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(ratings[i] &amp;gt; ratings[i - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                prevCandy++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                peekPos = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                peekCandy = prevCandy;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                totalCandies += prevCandy;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                prevCandy = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                totalCandies += prevCandy;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(ratings[i] == ratings[i - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    peekPos = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    peekCandy = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                totalCandies += i - peekPos - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(peekCandy - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;  i - peekPos) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    totalCandies++;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; totalCandies;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/TylerYang/leetcode/blob/master/135.Candy/Solution.java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Full version code&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Conclusion&quot;&gt;&lt;a href=&quot;#Conclusion&quot; class=&quot;headerlink&quot; title=&quot;Conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h3&gt;&lt;p&gt;Nice problem, though there are some guys can solve it with linear space complexity, in this way we only use O(1) space complexity which I think it’s better than the other solution.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;This is a very interesting question and it have a bunch of corner cases that we need to consider. (It takes me more than 5 hours to solve it at the first time.)&lt;/p&gt;
&lt;h3 id=&quot;Candy&quot;&gt;&lt;a href=&quot;#Candy&quot; class=&quot;headerlink&quot; title=&quot;Candy&quot;&gt;&lt;/a&gt;Candy&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;There are N children standing in a line. Each child is assigned a rating value.&lt;/p&gt;
&lt;p&gt;You are giving candies to these children subjected to the following requirements:&lt;/p&gt;
&lt;p&gt;Each child must have at least one candy.&lt;br&gt;Children with a higher rating get more candies than their neighbors.&lt;br&gt;What is the minimum candies you must give?&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Interview" scheme="tyleryang.github.io/categories/Interview/"/>
    
      <category term="Leetcode" scheme="tyleryang.github.io/categories/Interview/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="tyleryang.github.io/tags/Leetcode/"/>
    
      <category term="Greedy Algorithm" scheme="tyleryang.github.io/tags/Greedy-Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Dependency Injection in JavaScript</title>
    <link href="tyleryang.github.io/2015/08/01/Dependency-Injection-in-JavaScript/"/>
    <id>tyleryang.github.io/2015/08/01/Dependency-Injection-in-JavaScript/</id>
    <published>2015-08-01T14:55:47.000Z</published>
    <updated>2016-04-02T12:16:22.000Z</updated>
    
    <content type="html">&lt;p&gt;Dependency Injection is kind of design pattern. Well, although it is not in the GOF’s design pattern list, but I think it is getting more and more important.&lt;/p&gt;
&lt;h3 id=&quot;Why-we-need-Dependency-Injection&quot;&gt;&lt;a href=&quot;#Why-we-need-Dependency-Injection&quot; class=&quot;headerlink&quot; title=&quot;Why we need Dependency Injection?&quot;&gt;&lt;/a&gt;Why we need Dependency Injection?&lt;/h3&gt;&lt;p&gt;Firstly let us think about why we need dependency injection. Suppose we have a function below,&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CoffeeMaker&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; grinder = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Grinder();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pump = Pump.getInstance();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; heater = app.get(&lt;span class=&quot;string&quot;&gt;&quot;Heater&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.brew = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        grinder.grind();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        heater.on();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pump.pump();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;This is not a good example, because the &lt;code&gt;CoffeeMaker&lt;/code&gt; is tightly couple to this particular environment, which means to use &lt;code&gt;CoffeeMaker&lt;/code&gt; we need to make sure we can get the &lt;code&gt;Grinder&lt;/code&gt;, &lt;code&gt;Pump&lt;/code&gt; and &lt;code&gt;Heater&lt;/code&gt; in our environment.&lt;/p&gt;
&lt;p&gt;If we just write down our code in one function, it’s not that kind of bad thing. How about in our project? Let’s me give u one more function. &lt;/p&gt;
&lt;p&gt;Well, definitely we get a main function looks like the code below,&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; coffeeMaker = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CoffeeMaker();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    coffeeMaker.brew();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;For now, if we want to test &lt;code&gt;main&lt;/code&gt; function, &lt;strong&gt;we need to make sure we have &lt;code&gt;CoffeeMaker&lt;/code&gt; in our environment.&lt;/strong&gt; Further more, we need to check &lt;code&gt;CoffeeMaker&lt;/code&gt;‘s code and &lt;strong&gt;we need to make sure all the things &lt;code&gt;CoffeeMaker&lt;/code&gt; depends on are exist.&lt;/strong&gt; In our example, they are &lt;code&gt;Grinder&lt;/code&gt;, &lt;code&gt;Pump&lt;/code&gt; and &lt;code&gt;Heater&lt;/code&gt;.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;main =&amp;gt; CoffeeMaker =&amp;gt; Grinder, Pump, Heater&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In a word, to test &lt;code&gt;main&lt;/code&gt; function, we need to create &lt;code&gt;CoffeeMaker&lt;/code&gt;, &lt;code&gt;Grinder&lt;/code&gt;, &lt;code&gt;Pump&lt;/code&gt; and &lt;code&gt;Heater&lt;/code&gt; in our test environment.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Think about it, when our project getting bigger and bigger, we get a chance to have a controller or service which have more than 1000 lines. Are we still be able to maintain all these code?&lt;/p&gt;
&lt;p&gt;To do it in a better way, let’s change our code into this.&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CoffeeMaker&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;grinder, heater, pump&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.blew = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        grinder.grind();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        heater.on();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pump.pump();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;coffeeMaker&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; injector = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Injector();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; coffeeMaker = injector.get(CoffeeMaker);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    coffeeMaker.blew();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Now, if we want to test main function, we just simply mock coffeMaker and make sure our &lt;code&gt;mockCoffeeMaker&lt;/code&gt; have the function &lt;code&gt;blew&lt;/code&gt;, that’s all!&lt;/p&gt;
&lt;h3 id=&quot;Create-Our-Own-Dependency-Injection-Component&quot;&gt;&lt;a href=&quot;#Create-Our-Own-Dependency-Injection-Component&quot; class=&quot;headerlink&quot; title=&quot;Create Our Own Dependency Injection Component&quot;&gt;&lt;/a&gt;Create Our Own Dependency Injection Component&lt;/h3&gt;&lt;p&gt;Actually, this is how angular DI works in angular 1.x; For next generation, they are going to use annotation to do this.(TypeScript can support annotation)&lt;/p&gt;
&lt;p&gt;Unlike Java, we don’t have annotation in JavaScript, so we might need to use some magic trick to make one.&lt;br&gt;In our example, even though we know the formal parameters are correspond to our functions’ name. But our interpreter don’t know about this. When we write down the code below, there’s no differences between &lt;code&gt;CoffeeMaker1&lt;/code&gt; and &lt;code&gt;CoffeeMaker2&lt;/code&gt;.&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//function1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CoffeeMaker1&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;grinder, heater, pump&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.blew = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        grinder.grind();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        heater.on();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pump.pump();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//function2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CoffeeMaker2&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a, b, c&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.blew = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        a.grind();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        b.on();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        c.pump();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;So how can we make sure in our &lt;code&gt;CoffeeMaker&lt;/code&gt; we will invoke the right function? This is where the trick happen, &lt;code&gt;toString&lt;/code&gt;;&lt;/p&gt;
&lt;p&gt;Basically we just simply invoke &lt;code&gt;CoffeeMaker.toString()&lt;/code&gt;, then we will get the function in a string format. And then we can use regex get the parameters list.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; FN_ARGS = &lt;span class=&quot;regexp&quot;&gt;/^function\s*[^\(]*\(\s*([^\(]*)\)/m&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; str = CoffeeMaker.toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; injectArr =  str.match(FN_ARGS);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(injectArr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//[&quot;function CoffeeMaker(grinder, heater, pump)&quot;, &quot;grinder, heater, pump&quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;For now we can easily pass our dependency into the CoffeeMaker.&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Injector&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.cache = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.path = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.INSTANTIATING = &amp;#123;&amp;#125;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Injector.prototype.invoke = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;fn&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; args = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; $inject = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.annotate(fn);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; $inject.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        funcKey = $inject[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        args.push(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.get(funcKey));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; fn.apply(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, args);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Injector.prototype.annotate = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;fn&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; FN_ARGS = &lt;span class=&quot;regexp&quot;&gt;/^function\s*[^\(]*\(\s*([^\(]*)\)/m&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; FN_TRIM = &lt;span class=&quot;regexp&quot;&gt;/^\s+|\s+$/&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fnStr = fn.toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; matchArr = fnStr.match(FN_ARGS);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; $inject = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(matchArr.length &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = matchArr[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;].split(&lt;span class=&quot;string&quot;&gt;&quot;,&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; arr.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			arr[i] = arr[i].replace(FN_TRIM, &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			$inject.push(arr[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; $inject;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Injector.prototype.get = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;funcName&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.cache.hasOwnProperty(funcName)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.cache[funcName] == &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.INSTANTIATING) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Circular dependency found: &quot;&lt;/span&gt; + funcName + &lt;span class=&quot;string&quot;&gt;&quot; &amp;lt;- &quot;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.path.join(&lt;span class=&quot;string&quot;&gt;&quot; &amp;lt;- &quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.cache[funcName];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.path.unshift(funcName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.cache[funcName] = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.INSTANTIATING;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.cache[funcName] = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;[funcName];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Dependency Injection is kind of design pattern. Well, although it is not in the GOF’s design pattern list, but I think it is getting more and more important.&lt;/p&gt;
&lt;h3 id=&quot;Why-we-need-Dependency-Injection&quot;&gt;&lt;a href=&quot;#Why-we-need-Dependency-Injection&quot; class=&quot;headerlink&quot; title=&quot;Why we need Dependency Injection?&quot;&gt;&lt;/a&gt;Why we need Dependency Injection?&lt;/h3&gt;&lt;p&gt;Firstly let us think about why we need dependency injection. Suppose we have a function below,&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CoffeeMaker&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; grinder = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Grinder();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pump = Pump.getInstance();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; heater = app.get(&lt;span class=&quot;string&quot;&gt;&quot;Heater&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.brew = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        grinder.grind();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        heater.on();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pump.pump();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Language" scheme="tyleryang.github.io/categories/Language/"/>
    
      <category term="Javascript" scheme="tyleryang.github.io/categories/Language/Javascript/"/>
    
    
      <category term="javascript" scheme="tyleryang.github.io/tags/javascript/"/>
    
      <category term="design pattern" scheme="tyleryang.github.io/tags/design-pattern/"/>
    
  </entry>
  
  <entry>
    <title>Valid Number - Leetcode</title>
    <link href="tyleryang.github.io/2015/08/01/Valid-Number-Leetcode/"/>
    <id>tyleryang.github.io/2015/08/01/Valid-Number-Leetcode/</id>
    <published>2015-08-01T08:32:43.000Z</published>
    <updated>2016-04-02T12:16:46.000Z</updated>
    
    <content type="html">&lt;p&gt;The hardest problem in leetcode, and it force me to read something new, maybe this is why we solve the problem in the online judge system.&lt;/p&gt;
&lt;h3 id=&quot;Valid-Number&quot;&gt;&lt;a href=&quot;#Valid-Number&quot; class=&quot;headerlink&quot; title=&quot;Valid Number&quot;&gt;&lt;/a&gt;Valid Number&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Valid if a given string is numeric.&lt;/p&gt;
&lt;p&gt;Some examples:&lt;br&gt;&lt;code&gt;&amp;quot;0&amp;quot;&lt;/code&gt; =&amp;gt; &lt;code&gt;true&lt;/code&gt;&lt;br&gt;&lt;code&gt;&amp;quot; 0.1&amp;quot;&lt;/code&gt; =&amp;gt; &lt;code&gt;true&lt;/code&gt;&lt;br&gt;&lt;code&gt;&amp;quot;abc&amp;quot;&lt;/code&gt; =&amp;gt; &lt;code&gt;true&lt;/code&gt;&lt;br&gt;&lt;code&gt;&amp;quot;1 a&amp;quot;&lt;/code&gt; =&amp;gt; &lt;code&gt;true&lt;/code&gt;&lt;br&gt;&lt;code&gt;&amp;quot;2e10&amp;quot;&lt;/code&gt; =&amp;gt; &lt;code&gt;true&lt;/code&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Analysis&quot;&gt;&lt;a href=&quot;#Analysis&quot; class=&quot;headerlink&quot; title=&quot;Analysis&quot;&gt;&lt;/a&gt;Analysis&lt;/h3&gt;&lt;p&gt;Well, regular expression must be a way to solve this problem. But I don’t think the recuiter would accept regex solution. &lt;/p&gt;
&lt;p&gt;This problem is all about state and the transition which is how regular expression worked. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Finite State Automata&lt;br&gt;A finite-state machine or finite-state automatata, or simply a state machine, is a mathematial model of computation used to design both computer programs and sequential logic circuits. It is conceived as an abstract machine that can be in one of a finite number of states. &lt;strong&gt;The machine is in only one state at a time;&lt;/strong&gt;  – from Wikipedia &lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Finite-state machine&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In a word, to know whether a string is numeric we need to know all the states and the possible transition. And after spend some time we can get the list below,&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1   + or -&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2   number (0 - 9)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3   . (dot)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4   e or E (exponent)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5   others (includ space)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;With all this possible inputs, we can use the &lt;a href=&quot;https://en.wikipedia.org/wiki/State_diagram&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;State Diagram&lt;/a&gt; to describe all the valid and the transitions.&lt;br&gt;For example, from &lt;code&gt;state1&lt;/code&gt; it can be only transformed into &lt;code&gt;state2&lt;/code&gt; or &lt;code&gt;state3&lt;/code&gt;, which means &lt;code&gt;+3&lt;/code&gt;, &lt;code&gt;-.4&lt;/code&gt; are all valid numeric but &lt;code&gt;+e10&lt;/code&gt;, &lt;code&gt;+ 4&lt;/code&gt; are not.&lt;br&gt;To give a most complicated valid numeric expression should contains all states, &lt;code&gt;+0.42e-10&lt;/code&gt; should be the one.&lt;br&gt;So we can draw down the State Diagram below,&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/TylerYang/leetcode/master/65.ValidNumber/validNumber.png&quot; alt=&quot;State Diagram&quot;&gt;&lt;/p&gt;
&lt;p&gt;From this diagram, we can write down the pseudo code blow,&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int state = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;boolean hasNumber = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for(each char in String s)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if(char is plus or minus) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if(state == 0 or 5) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            state++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; else if(char is number) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if(state == 0 or 1 or 2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            state = 2; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            hasNumber = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else if(state == 3 or 4) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            state = 4; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            hasNumber = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else if(state == 5 or 6 or 7) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            state = 7;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; else if(char is dot) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if(state == 0 or 1 or 2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            state = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; else if(char is exponent) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if(state == 2 or 3 or 4) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            state = 5;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return hashNumber &amp;amp;&amp;amp; (state == 2 or 3 or 4 or 7);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/valid-number/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Here is the Valid Number in leetcode oj.&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/TylerYang/leetcode/blob/master/65.ValidNumber/Solution.java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Here is the full version of java implementation.&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Conclusion&quot;&gt;&lt;a href=&quot;#Conclusion&quot; class=&quot;headerlink&quot; title=&quot;Conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h3&gt;&lt;p&gt;As for my understanding, this problem has a very similar concept with Knuth-Morris-Pratt algorithm which is known as KMP algorithm. They are all base on &lt;strong&gt;Finite State Automata&lt;/strong&gt;, which is really worth a try. Here I recommend &lt;a href=&quot;http://www.amazon.com/Algorithms-4th-Robert-Sedgewick/dp/032157351X/ref=sr_1_1?ie=UTF8&amp;amp;qid=1438428554&amp;amp;sr=8-1&amp;amp;keywords=algorithm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;Algorithm (the 4th Edition)&lt;/strong&gt;&lt;/a&gt;, in this book, the author give a very detail introduction of &lt;strong&gt;StateMachine&lt;/strong&gt; in chapter 5.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;The hardest problem in leetcode, and it force me to read something new, maybe this is why we solve the problem in the online judge system.&lt;/p&gt;
&lt;h3 id=&quot;Valid-Number&quot;&gt;&lt;a href=&quot;#Valid-Number&quot; class=&quot;headerlink&quot; title=&quot;Valid Number&quot;&gt;&lt;/a&gt;Valid Number&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Valid if a given string is numeric.&lt;/p&gt;
&lt;p&gt;Some examples:&lt;br&gt;&lt;code&gt;&amp;quot;0&amp;quot;&lt;/code&gt; =&amp;gt; &lt;code&gt;true&lt;/code&gt;&lt;br&gt;&lt;code&gt;&amp;quot; 0.1&amp;quot;&lt;/code&gt; =&amp;gt; &lt;code&gt;true&lt;/code&gt;&lt;br&gt;&lt;code&gt;&amp;quot;abc&amp;quot;&lt;/code&gt; =&amp;gt; &lt;code&gt;true&lt;/code&gt;&lt;br&gt;&lt;code&gt;&amp;quot;1 a&amp;quot;&lt;/code&gt; =&amp;gt; &lt;code&gt;true&lt;/code&gt;&lt;br&gt;&lt;code&gt;&amp;quot;2e10&amp;quot;&lt;/code&gt; =&amp;gt; &lt;code&gt;true&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Interview" scheme="tyleryang.github.io/categories/Interview/"/>
    
      <category term="Leetcode" scheme="tyleryang.github.io/categories/Interview/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="tyleryang.github.io/tags/Leetcode/"/>
    
      <category term="Finite State Automata" scheme="tyleryang.github.io/tags/Finite-State-Automata/"/>
    
      <category term="State Machine" scheme="tyleryang.github.io/tags/State-Machine/"/>
    
  </entry>
  
  <entry>
    <title>Palindrome PartitioningII - Leetcode</title>
    <link href="tyleryang.github.io/2015/08/01/Palindrome-PartionningII-Leetcode/"/>
    <id>tyleryang.github.io/2015/08/01/Palindrome-PartionningII-Leetcode/</id>
    <published>2015-07-31T16:09:13.000Z</published>
    <updated>2016-04-02T12:16:28.000Z</updated>
    
    <content type="html">&lt;p&gt;This should be one of the most insteresting algorithm problem I try to solve within this month.&lt;/p&gt;
&lt;p&gt;Here is the question,&lt;/p&gt;
&lt;h3 id=&quot;Palindrome-PartitioningII&quot;&gt;&lt;a href=&quot;#Palindrome-PartitioningII&quot; class=&quot;headerlink&quot; title=&quot;Palindrome PartitioningII&quot;&gt;&lt;/a&gt;Palindrome PartitioningII&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given a string s, partition s such that every substring of the partition is a palindrome.&lt;br&gt;Return the minimum cuts needs for a palindrome partitioning of s.&lt;/p&gt;
&lt;p&gt;For example, given s = “aab”,&lt;br&gt;Return &lt;code&gt;1&lt;/code&gt; since the palindrome partitioning &lt;code&gt;[&amp;quot;aa&amp;quot;, &amp;quot;b&amp;quot;]&lt;/code&gt; could be produced using 1 cut.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Analysis&quot;&gt;&lt;a href=&quot;#Analysis&quot; class=&quot;headerlink&quot; title=&quot;Analysis&quot;&gt;&lt;/a&gt;Analysis&lt;/h3&gt;&lt;p&gt;To get the minimum cut, of course backtracking can get an answer. To do it in a better way, &lt;strong&gt;Dynamic Programming&lt;/strong&gt; will be suit for us.&lt;/p&gt;
&lt;p&gt;Let’s say, we want to know the minimum cut for string &lt;code&gt;s = &amp;quot;aabaabcb&amp;quot;&lt;/code&gt;,&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;0 1 2 3 4 5 6 7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a a b a a c b c&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Apparently, we need to find out all the palindrome substring in it so that we can get the minimum cut. But we can reuse some part of the substring. For example, if we know &lt;code&gt;aba&lt;/code&gt; is a palindrome, to valid &lt;code&gt;aabaa&lt;/code&gt; we only need to make sure the first character equals to the last one.&lt;br&gt;So the first step is to find out all the substring which is palindrome.&lt;br&gt;We use 2 dimension array to store all the result. For String &lt;code&gt;s = &amp;quot;aabaabcb&amp;quot;&lt;/code&gt;, substring s.substring(1, 3) is a palindrome, so we set &lt;code&gt;dp[1][3] = true&lt;/code&gt;, here is the java code.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt;[][] dp = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt;[s.length()][s.length()];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = s.length() - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i--) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = i; j &amp;lt; s.length(); j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(s.charAt(j) == s.charAt(i) &amp;amp;&amp;amp; (j - i &amp;lt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; || dp[i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;)) dp[i][j] = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;after run this code, we get a two dimension array below,&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1 1 0 0 1 0 0 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 1 0 1 0 0 0 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 0 1 0 0 0 0 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 0 0 1 1 0 0 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 0 0 0 1 0 0 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 0 0 0 0 1 0 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 0 0 0 0 0 1 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0 0 0 0 0 0 0 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Actually it is easy to get this 2d array, the trick is in the next step.&lt;br&gt;To get the minimum cut from it, we need to compare different combinations, e.g for string &lt;code&gt;abaacbc&lt;/code&gt; the minimun cut should be one of the combinations below,&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;subStr.length() - 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 + minCut(&amp;quot;baacbc&amp;quot;) //a is palindrome&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 + minCut(&amp;quot;acbc&amp;quot;)   //aba is palindrome&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;A navie idea is code it up with simply recursive call. Can we do it better? To get the min cut of &lt;code&gt;abaacbc&lt;/code&gt;, we need to know the min cut of &lt;code&gt;baacbc&lt;/code&gt; and &lt;code&gt;acbc&lt;/code&gt;. Then we know this is another &lt;strong&gt;Dynamic Programming&lt;/strong&gt; solution. In another word, to solve this problem, we need to use &lt;strong&gt;Dynamic Programming&lt;/strong&gt; two times.&lt;/p&gt;
&lt;p&gt;Let’s create an one-dimension array, &lt;code&gt;minCut&lt;/code&gt;, each element stands for min cut of s.substring(i)&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] minCut = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[s.length() + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;//last should be &quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; minCut.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    minCut[i] = minCut.length - i - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//[7 6 5 4 3 2 1 0 -1]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = s.length() - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i--) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = i; j &amp;lt; s.length(); j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(dp[i][j] == &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            minCut[i] = Math.min(minCut[i], &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + minCut[j + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; minCut[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Conclusion&quot;&gt;&lt;a href=&quot;#Conclusion&quot; class=&quot;headerlink&quot; title=&quot;Conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h3&gt;&lt;p&gt;The interesting part of this problem is we need to use DP two times. During our processes, we should know which part we can improve. &lt;a href=&quot;https://github.com/TylerYang/leetcode/blob/master/132.PalindromePartitioningII/Solution.java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Here is the java code.&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;This should be one of the most insteresting algorithm problem I try to solve within this month.&lt;/p&gt;
&lt;p&gt;Here is the question,&lt;/p&gt;
&lt;h3 id=&quot;Palindrome-PartitioningII&quot;&gt;&lt;a href=&quot;#Palindrome-PartitioningII&quot; class=&quot;headerlink&quot; title=&quot;Palindrome PartitioningII&quot;&gt;&lt;/a&gt;Palindrome PartitioningII&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given a string s, partition s such that every substring of the partition is a palindrome.&lt;br&gt;Return the minimum cuts needs for a palindrome partitioning of s.&lt;/p&gt;
&lt;p&gt;For example, given s = “aab”,&lt;br&gt;Return &lt;code&gt;1&lt;/code&gt; since the palindrome partitioning &lt;code&gt;[&amp;quot;aa&amp;quot;, &amp;quot;b&amp;quot;]&lt;/code&gt; could be produced using 1 cut.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Interview" scheme="tyleryang.github.io/categories/Interview/"/>
    
      <category term="Leetcode" scheme="tyleryang.github.io/categories/Interview/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="tyleryang.github.io/tags/Leetcode/"/>
    
      <category term="Dynamic Programming" scheme="tyleryang.github.io/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>Reverse Hash Function - Google Challenge</title>
    <link href="tyleryang.github.io/2015/07/25/Reverse-Hash-Function-Google-Challenge/"/>
    <id>tyleryang.github.io/2015/07/25/Reverse-Hash-Function-Google-Challenge/</id>
    <published>2015-07-25T08:01:42.000Z</published>
    <updated>2016-04-10T06:01:27.000Z</updated>
    
    <content type="html">&lt;p&gt;Recently I’ve been doing the Google Challenge, and I found a very interesting algorithm problem. Here is the problem.&lt;/p&gt;
&lt;h3 id=&quot;Reverse-a-Hash-Function-Level-3&quot;&gt;&lt;a href=&quot;#Reverse-a-Hash-Function-Level-3&quot; class=&quot;headerlink&quot; title=&quot;Reverse a Hash Function (Level 3)&quot;&gt;&lt;/a&gt;Reverse a Hash Function (Level 3)&lt;/h3&gt;&lt;p&gt;The function takes a 16 byte input and gives a 16 byte output. It uses multiplication (*), bit-wise exclusive OR (XOR) and modulo (%) to calculate an element of the digest based on elements of the input message: &lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;digest [i] = ( (&lt;span class=&quot;number&quot;&gt;129&lt;/span&gt; * message[i]) XOR message[i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]) % &lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;For the first element, the value of &lt;code&gt;message[-1]&lt;/code&gt; is 0.&lt;br&gt;For example, if &lt;code&gt;message[0] = 1&lt;/code&gt; and &lt;code&gt;message[1] = 129&lt;/code&gt;, then:&lt;br&gt;For &lt;code&gt;digest[0]&lt;/code&gt;:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;129&lt;/span&gt; * message[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;129&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;129&lt;/span&gt; XOR message[-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;129&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;129&lt;/span&gt; % &lt;span class=&quot;number&quot;&gt;256&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;129&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Thus &lt;code&gt;digest[0] = 129&lt;/code&gt;.&lt;br&gt;For digest[1]:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;129&lt;/span&gt;*message[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;16641&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;16641&lt;/span&gt; XOR message[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;16640&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;16640&lt;/span&gt; % &lt;span class=&quot;number&quot;&gt;256&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Thus &lt;code&gt;digest[1] = 0&lt;/code&gt;.&lt;br&gt;Write a function answer(digest) that takes &lt;strong&gt;an array of 16 integers&lt;/strong&gt; and returns another array of 16 that correspond to the unique message that created this digest. Since each value is a single byte, the values are &lt;strong&gt;0 to 255&lt;/strong&gt; for both message and digest.&lt;/p&gt;
&lt;h3 id=&quot;Test-cases&quot;&gt;&lt;a href=&quot;#Test-cases&quot; class=&quot;headerlink&quot; title=&quot;Test cases&quot;&gt;&lt;/a&gt;Test cases&lt;/h3&gt;&lt;p&gt;Inputs:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; list) digest = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;129&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;129&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;129&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;129&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;129&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;129&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;129&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;129&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Output:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; list) [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Inputs:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; list) digest = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;129&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;141&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;137&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;61&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;149&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;113&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;145&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;53&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;157&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;233&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;185&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;109&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;165&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Output:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; list) [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;36&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;49&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;81&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;121&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;144&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;169&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;196&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;225&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Analysis&quot;&gt;&lt;a href=&quot;#Analysis&quot; class=&quot;headerlink&quot; title=&quot;Analysis&quot;&gt;&lt;/a&gt;Analysis&lt;/h3&gt;&lt;p&gt;Basically this problem is about how to reverse this expression,&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;digest [i] = ( (&lt;span class=&quot;number&quot;&gt;129&lt;/span&gt; * message[i]) XOR message[i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]) % &lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The first moment I saw this problem, I was wondering maybe I can just simply move the modulo operator(%) to the right side, and then the &lt;code&gt;XOR&lt;/code&gt; operator. For &lt;code&gt;129 * message[i]&lt;/code&gt;, maybe I can use the forloop to find out the right one.&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;% 256&lt;/code&gt; we know it is only set a upperbound to our hash result, XOR &lt;code&gt;message[i - 1]&lt;/code&gt; will not affect the result of modulo(message[i - 1] is in the interleaving [0, 255]). which means&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;digest[i] = ((129 * message[i]) XOR message[i - 1]) % 256&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          = ((129 * message[i]) % 256) XOR message[i - 1]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Considering the expression below,&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a ^ b = c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c ^ b = a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c ^ a = b;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Appearently we know this will happen, if you want the approvement, &lt;a href=&quot;/2015/07/25/About-XOR-operator/&quot;&gt;here is another post about this.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We know the value of &lt;code&gt;digest[i]&lt;/code&gt; and &lt;code&gt;message[i - 1]&lt;/code&gt;, so we get the expression below,&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;digest[i] = ((129 * message[i]) % 256) XOR message[i - 1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;digest[i] XOR message[i - 1] = (129 * message[i]) % 256&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Now the question become for x in [0, 255], y in [0, 255]&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(129 * x) % 256 = y //we know what is y (digest[i] ^ message[i - 1])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt; What is x ? &lt;/strong&gt;&lt;/strong&gt;&lt;br&gt;We don’t know it yet. Let us clear our mind and run these code in your chrome web developer tool.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; x &amp;lt;= &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;; x++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;x:&quot;&lt;/span&gt; + x + &lt;span class=&quot;string&quot;&gt;&quot;, result: &quot;&lt;/span&gt; + (&lt;span class=&quot;number&quot;&gt;129&lt;/span&gt; * x % &lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;From the result, we will see in some number when we run this expression,&lt;br&gt;&lt;code&gt;129 * x % 256&lt;/code&gt; it will equals to x. To be more clearly, let us run the javascript code into chrome dvp tool one more time.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; x &amp;lt;= &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;; x += &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;x:&quot;&lt;/span&gt; + x + &lt;span class=&quot;string&quot;&gt;&quot;, result: &quot;&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;129&lt;/span&gt; * x % &lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; x &amp;lt;= &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;; x += &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;x:&quot;&lt;/span&gt; + x + &lt;span class=&quot;string&quot;&gt;&quot;, result: &quot;&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;129&lt;/span&gt; * x % &lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Now we know that when the &lt;code&gt;x&lt;/code&gt; is &lt;strong&gt;&lt;strong&gt;EVEN&lt;/strong&gt;&lt;/strong&gt;, &lt;code&gt;129 * x % 256&lt;/code&gt; will equals to &lt;code&gt;x&lt;/code&gt;. When &lt;code&gt;x&lt;/code&gt; is &lt;strong&gt;&lt;strong&gt;ODD&lt;/strong&gt;&lt;/strong&gt; the result start from 129 until it reach 255, then it start from 1.&lt;/p&gt;
&lt;p&gt;A very interesting fact about this express is, &lt;code&gt;129&lt;/code&gt; and &lt;code&gt;256&lt;/code&gt; are very insteresting numbers, &lt;code&gt;129 == 256 / 2 + 1&lt;/code&gt;, Which means per two 129 we will get 258 and after mod 256 we only get &lt;code&gt;2&lt;/code&gt;. when x is &lt;strong&gt;&lt;strong&gt;EVEN&lt;/strong&gt;&lt;/strong&gt;, let’s say x is &lt;code&gt;4&lt;/code&gt;,&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;129 * 4 % 256 = (129 * 2 + 129 * 2) % 256&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              = (256 + 2 + 256 + 2) % 256&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              = 4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;This is why when &lt;code&gt;x&lt;/code&gt; is &lt;strong&gt;&lt;strong&gt;EVEN&lt;/strong&gt;&lt;/strong&gt; the result is equals to itself.&lt;/p&gt;
&lt;p&gt;Then how about &lt;code&gt;x&lt;/code&gt; is &lt;strong&gt;&lt;strong&gt;ODD&lt;/strong&gt;&lt;/strong&gt;? Assumming &lt;code&gt;x&lt;/code&gt; is 5, we can get the result below,&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;129 * 5 % 256 = (129 * 2 + 129 * 2 + 129) % 256&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              = (256 + 2 + 256 + 2 + 129) % 256&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              = 4 + 129 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              = 5 + 128&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;For &lt;strong&gt;&lt;strong&gt;ODD&lt;/strong&gt;&lt;/strong&gt; &lt;code&gt;x&lt;/code&gt;, one thing we need to consider is, if &lt;code&gt;x&lt;/code&gt; is larger than 128, this expression will smaller than 128, let’s say &lt;code&gt;x&lt;/code&gt; is 131&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;129 * 131 % 256 = (129 * 128 + 129 * 3) % 256&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                = (128 * 128 + 128 + 256 + 2 + 129) % 256&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                = (128 + 129 + 2) % 256&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                = (256 + 3) % 256&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                = 3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;For now we can write down our pseudo code blow,&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if(digest[i] XOR message[i - 1] is EVEN) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//message[i] is EVEN&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	message[i] = digest[i] ^ message[i - 1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//message[i] is ODD&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if(digest[i] &amp;gt; 128) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if(message[i - 1] &amp;gt; 128) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			// 129 * message[i] % 256 &amp;lt; 128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			// message[i] &amp;gt; 128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			message[i] += 128;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			// 129 * message[i] % 256 &amp;gt; 128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			// message[i] &amp;lt; 128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			message[i] -= 128;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if(message[i - 1] &amp;gt; 128) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			// 129 * message[i] % 256 &amp;gt; 128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			// message[i] &amp;lt; 128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			message[i] += 128;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			// 129 * message[i] % 256 &amp;lt; 128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			// message[i] &amp;gt; 128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			message[i] -= 128;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Here is Java Code,&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] reverseHash(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] digest) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; prevM = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] message = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[digest.length];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; digest.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            message[i] = tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(tmp % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(digest[i] &amp;gt; &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    message[i] += message[i - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &amp;gt; &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt; ? &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt; : -&lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    message[i] += message[i - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &amp;gt; &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt; ? &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt; : -&lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//corner case  e.g[1,1,1,1,1,1,1,1,1,1,1...];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                message[i] = (message[i] + &lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;) % &lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            prevM = message[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; message;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Conclusion&quot;&gt;&lt;a href=&quot;#Conclusion&quot; class=&quot;headerlink&quot; title=&quot;Conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h3&gt;&lt;p&gt;Personally, I think this problem really worth a try. It’s about some specify algorithm(e.g Dynamic Programming, Greedy Algorithm). This problem is only about the basic bit manipulation and some math stuff. At least, this problem tell me, it’s time to read the csapp one more time. : )&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Recently I’ve been doing the Google Challenge, and I found a very interesting algorithm problem. Here is the problem.&lt;/p&gt;
&lt;h3 id=&quot;Reverse-a-Hash-Function-Level-3&quot;&gt;&lt;a href=&quot;#Reverse-a-Hash-Function-Level-3&quot; class=&quot;headerlink&quot; title=&quot;Reverse a Hash Function (Level 3)&quot;&gt;&lt;/a&gt;Reverse a Hash Function (Level 3)&lt;/h3&gt;&lt;p&gt;The function takes a 16 byte input and gives a 16 byte output. It uses multiplication (*), bit-wise exclusive OR (XOR) and modulo (%) to calculate an element of the digest based on elements of the input message: &lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;digest [i] = ( (&lt;span class=&quot;number&quot;&gt;129&lt;/span&gt; * message[i]) XOR message[i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]) % &lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;For the first element, the value of &lt;code&gt;message[-1]&lt;/code&gt; is 0.&lt;br&gt;For example, if &lt;code&gt;message[0] = 1&lt;/code&gt; and &lt;code&gt;message[1] = 129&lt;/code&gt;, then:&lt;br&gt;For &lt;code&gt;digest[0]&lt;/code&gt;:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;129&lt;/span&gt; * message[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;129&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;129&lt;/span&gt; XOR message[-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;129&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;129&lt;/span&gt; % &lt;span class=&quot;number&quot;&gt;256&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;129&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Thus &lt;code&gt;digest[0] = 129&lt;/code&gt;.&lt;br&gt;For digest[1]:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;129&lt;/span&gt;*message[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;16641&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;16641&lt;/span&gt; XOR message[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;16640&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;16640&lt;/span&gt; % &lt;span class=&quot;number&quot;&gt;256&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Thus &lt;code&gt;digest[1] = 0&lt;/code&gt;.&lt;br&gt;Write a function answer(digest) that takes &lt;strong&gt;an array of 16 integers&lt;/strong&gt; and returns another array of 16 that correspond to the unique message that created this digest. Since each value is a single byte, the values are &lt;strong&gt;0 to 255&lt;/strong&gt; for both message and digest.&lt;/p&gt;
&lt;h3 id=&quot;Test-cases&quot;&gt;&lt;a href=&quot;#Test-cases&quot; class=&quot;headerlink&quot; title=&quot;Test cases&quot;&gt;&lt;/a&gt;Test cases&lt;/h3&gt;&lt;p&gt;Inputs:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; list) digest = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;129&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;129&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;129&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;129&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;129&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;129&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;129&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;129&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Output:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; list) [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Inputs:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; list) digest = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;129&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;141&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;137&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;61&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;149&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;113&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;145&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;53&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;157&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;233&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;185&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;109&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;165&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Output:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; list) [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;36&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;49&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;81&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;121&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;144&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;169&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;196&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;225&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Interview" scheme="tyleryang.github.io/categories/Interview/"/>
    
      <category term="Google Challenge" scheme="tyleryang.github.io/categories/Interview/Google-Challenge/"/>
    
    
      <category term="Algorithm" scheme="tyleryang.github.io/tags/Algorithm/"/>
    
      <category term="Google Challenge" scheme="tyleryang.github.io/tags/Google-Challenge/"/>
    
  </entry>
  
  <entry>
    <title>About XOR operator</title>
    <link href="tyleryang.github.io/2015/07/25/About-XOR-operator/"/>
    <id>tyleryang.github.io/2015/07/25/About-XOR-operator/</id>
    <published>2015-07-25T06:15:16.000Z</published>
    <updated>2016-04-02T07:43:29.000Z</updated>
    
    <content type="html">&lt;p&gt;I think the chrome web developer tool is extremely useful, I perfer to use it to validate some expressions or some apis instead of using java or c. &lt;/p&gt;
&lt;p&gt;Considering the expression below,&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;number&quot;&gt;129&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; c = a ^ b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a ^ b;  &lt;span class=&quot;comment&quot;&gt;// 132&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b ^ c;  &lt;span class=&quot;comment&quot;&gt;// 5 equals to a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Let me prove this is right. The binary expression of integer 5 is, &lt;code&gt;101&lt;/code&gt;&lt;br&gt;for 129 is, &lt;code&gt;100000001&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;XOR means with the same bit value you will get &lt;code&gt;0&lt;/code&gt;, or vise versa.&lt;br&gt;So when we do &lt;code&gt;a ^ b&lt;/code&gt; means we will get the bit which only exist in &lt;code&gt;a&lt;/code&gt; or &lt;code&gt;b&lt;/code&gt;.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;//a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              XOR&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;//b&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-----------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;//c  bits only exist in a or b&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;So &lt;code&gt;b ^ c&lt;/code&gt; means you will get the bit only exist in b or c.&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//b&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              XOR&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//c&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-----------------&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Appearently when we  &lt;code&gt;a ^ b&lt;/code&gt;, their public bits are all set to &lt;code&gt;0&lt;/code&gt;(The 0th) and the bits only exist in b or a is already save into the c(The 2th from a and the 8th from b).&lt;br&gt;So At this moment &lt;code&gt;b ^ c&lt;/code&gt; will equal to ‘bits only exist in a and bits exist in both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; which is &lt;code&gt;a&lt;/code&gt;‘(The 0th from &lt;code&gt;a&lt;/code&gt; and the 2th from &lt;code&gt;b&lt;/code&gt;). &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;I think the chrome web developer tool is extremely useful, I perfer to use it to validate some expressions or some apis instead of using java or c. &lt;/p&gt;
&lt;p&gt;Considering the expression below,&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;number&quot;&gt;129&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; c = a ^ b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a ^ b;  &lt;span class=&quot;comment&quot;&gt;// 132&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b ^ c;  &lt;span class=&quot;comment&quot;&gt;// 5 equals to a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Let me prove this is right. The binary expression of integer 5 is, &lt;code&gt;101&lt;/code&gt;&lt;br&gt;for 129 is, &lt;code&gt;100000001&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;XOR means with the same bit value you will get &lt;code&gt;0&lt;/code&gt;, or vise versa.&lt;br&gt;So when we do &lt;code&gt;a ^ b&lt;/code&gt; means we will get the bit which only exist in &lt;code&gt;a&lt;/code&gt; or &lt;code&gt;b&lt;/code&gt;.&lt;br&gt;
    
    </summary>
    
    
      <category term="CSAPP" scheme="tyleryang.github.io/tags/CSAPP/"/>
    
  </entry>
  
</feed>
