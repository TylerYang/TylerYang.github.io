<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Promise Land]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="tyleryang.github.io//"/>
  <updated>2015-08-01T16:05:37.000Z</updated>
  <id>tyleryang.github.io//</id>
  
  <author>
    <name><![CDATA[Tyler Yang]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Dependency Injection in JavaScript]]></title>
    <link href="tyleryang.github.io/2015/08/01/Dependency-Injection-implementation-in-javascript/"/>
    <id>tyleryang.github.io/2015/08/01/Dependency-Injection-implementation-in-javascript/</id>
    <published>2015-08-01T14:55:47.000Z</published>
    <updated>2015-08-01T16:05:37.000Z</updated>
    <content type="html"><![CDATA[<p>Dependency Injection is kind of design pattern. Well, although it is not in the GOF’s design pattern list, but I think it is getting more and more important.</p>
<h3 id="Why_we_need_Dependency_Injection?">Why we need Dependency Injection?</h3><p>Firstly let us think about why we need dependency injection. Imagine we have function below,<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CoffeeMaker</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> grinder = <span class="keyword">new</span> Grinder();</span><br><span class="line">    <span class="keyword">var</span> pump = Pump.getInstance();</span><br><span class="line">    <span class="keyword">var</span> heater = app.get(<span class="string">"Heater"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>.brew = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        grinder().grind();</span><br><span class="line">        heater.on();</span><br><span class="line">        pump.pump();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>This is not a good example, because the <code>CoffeeMaker</code> is tightly couple to this particular environment, which means to use <code>CoffeeMaker</code> we need to make sure we can get the <code>Grinder</code>, <code>Pump</code> and <code>Heater</code> in our environment.</p>
<p>If we just write down our code in one function, it’s not that kind of bad thing. How about in our project? Let’s me give u one more function. </p>
<p>Well, definitely we get a main function looks like the code below,<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> coffeeMaker = <span class="keyword">new</span> CoffeeMaker();</span><br><span class="line">    coffeeMaker.brew();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>For now, if we want to test <code>main</code> function, <strong>we need to make sure we have <code>CoffeeMaker</code> in our environment.</strong> Further more, we need to check <code>CoffeeMaker</code>‘s code and <strong>we need to make sure all the things <code>CoffeeMaker</code> depends on are exist.</strong> In our example, they are <code>Grinder</code>, <code>Pump</code> and <code>Heater</code>.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">main =&#62; CoffeeMaker =&#62; Grinder, Pump, Heater</span><br></pre></td></tr></table></figure></p>
<p><strong>In a word, to test <code>main</code> function, we need to create <code>CoffeeMaker</code>, <code>Grinder</code>, <code>Pump</code> and <code>Heater</code> in our test environment.</strong></p>
<p>Think about it, when our project getting bigger and bigger, we get a chance to have a controller or service which have more than 1000 lines. Are we still be able to maintain all these code?</p>
<p>To do it in a better way, let’s change our code into this.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CoffeeMaker</span>(<span class="params">grinder, heater, pump</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.blew = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        grinder.grind();</span><br><span class="line">        heater.on();</span><br><span class="line">        pump.pump();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params">coffeeMaker</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> injector = <span class="keyword">new</span> Injector();</span><br><span class="line">    <span class="keyword">var</span> coffeeMaker = injector.get(CoffeeMaker);</span><br><span class="line">    </span><br><span class="line">    coffeeMaker.blew();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Now, if we want to test main function, we just simply mock coffeMaker and make sure our <code>mockCoffeeMaker</code> have the function <code>blew</code>, that’s all!</p>
<h3 id="Create_Our_Own_Dependency_Injection_Component">Create Our Own Dependency Injection Component</h3><p>To be continued.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Dependency Injection is kind of design pattern. Well, although it is not in the GOF’s design pattern list, but I think it is getting more]]>
    </summary>
    
      <category term="design pattern" scheme="tyleryang.github.io/tags/design-pattern/"/>
    
      <category term="javascript" scheme="tyleryang.github.io/tags/javascript/"/>
    
      <category term="Language" scheme="tyleryang.github.io/categories/Language/"/>
    
      <category term="Javascript" scheme="tyleryang.github.io/categories/Language/Javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Valid Number - Leetcode]]></title>
    <link href="tyleryang.github.io/2015/08/01/Valid-Number-Leetcode/"/>
    <id>tyleryang.github.io/2015/08/01/Valid-Number-Leetcode/</id>
    <published>2015-08-01T08:32:43.000Z</published>
    <updated>2015-08-01T13:03:58.000Z</updated>
    <content type="html"><![CDATA[<p>The hardest problem in leetcode, and it force me to read something new, maybe this is why we solve the problem in the online judge system.</p>
<h3 id="Valid_Number">Valid Number</h3><blockquote>
<p>Valid if a given string is numeric.</p>
<p>Some examples:<br><code>&quot;0&quot;</code> =&gt; <code>true</code><br><code>&quot; 0.1&quot;</code> =&gt; <code>true</code><br><code>&quot;abc&quot;</code> =&gt; <code>true</code><br><code>&quot;1 a&quot;</code> =&gt; <code>true</code><br><code>&quot;2e10&quot;</code> =&gt; <code>true</code></p>
</blockquote>
<h3 id="Analysis">Analysis</h3><p>Well, regular expression must be a way to solve this problem. But I don’t think the recuiter would accept regex solution. </p>
<p>This problem is all about state and the transition which is how regular expression worked. </p>
<blockquote>
<p>Finite State Automata<br>A finite-state machine or finite-state automatata, or simply a state machine, is a mathematial model of computation used to design both computer programs and sequential logic circuits. It is conceived as an abstract machine that can be in one of a finite number of states. <strong>The machine is in only one state at a time;</strong>  — from Wikipedia <a href="https://en.wikipedia.org/wiki/Finite-state_machine" target="_blank" rel="external">Finite-state machine</a>.</p>
</blockquote>
<p>In a word, to know whether a string is numeric we need to know all the states and the possible transition. And after spend some time we can get the list below,<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1   + or -&#10;2   number (0 - 9)&#10;3   . (dot)&#10;4   e or E (exponent)&#10;5   others (includ space)</span><br></pre></td></tr></table></figure></p>
<p>With all this possible inputs, we can use the <a href="https://en.wikipedia.org/wiki/State_diagram" target="_blank" rel="external">State Diagram</a> to describe all the valid and the transitions.<br>For example, from <code>state1</code> it can be only transformed into <code>state2</code> or <code>state3</code>, which means <code>+3</code>, <code>-.4</code> are all valid numeric but <code>+e10</code>, <code>+ 4</code> are not.<br>To give a most complicated valid numeric expression should contains all states, <code>+0.42e-10</code> should be the one.<br>So we can draw down the State Diagram below,<br><img src="https://raw.githubusercontent.com/TylerYang/leetcode/master/65.ValidNumber/validNumber.png" alt="State Diagram"></p>
<p>From this diagram, we can write down the pseudo code blow,<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int state = 0;&#10;boolean hasNumber = false;&#10;for(each char in String s)&#123;&#10;    if(char is plus or minus) &#123;&#10;        if(state == 0 or 5) &#123;&#10;            state++;&#10;        &#125; else &#123;&#10;            return false;&#10;        &#125;&#10;    &#125; else if(char is number) &#123;&#10;        if(state == 0 or 1 or 2) &#123;&#10;            state = 2; &#10;            hasNumber = true;&#10;        &#125; else if(state == 3 or 4) &#123;&#10;            state = 4; &#10;            hasNumber = true;&#10;        &#125; else if(state == 5 or 6 or 7) &#123;&#10;            state = 7;&#10;        &#125;&#10;    &#125; else if(char is dot) &#123;&#10;        if(state == 0 or 1 or 2) &#123;&#10;            state = 3&#10;        &#125; else &#123;&#10;            return false;&#10;        &#125;&#10;    &#125; else if(char is exponent) &#123;&#10;        if(state == 2 or 3 or 4) &#123;&#10;            state = 5;&#10;        &#125; else &#123;&#10;            return false;&#10;        &#125;&#10;    &#125; else &#123;&#10;        return false;&#10;    &#125;&#10;&#125;&#10;return hashNumber &#38;&#38; (state == 2 or 3 or 4 or 7);</span><br></pre></td></tr></table></figure></p>
<p><a href="https://leetcode.com/problems/valid-number/" target="_blank" rel="external">Here is the Valid Number in leetcode oj.</a><br><a href="https://github.com/TylerYang/leetcode/blob/master/65.ValidNumber/Solution.java" target="_blank" rel="external">Here is the full version of java implementation.</a></p>
<h3 id="Conclusion">Conclusion</h3><p>As for my understanding, this problem has a very similar concept with Knuth-Morris-Pratt algorithm which is known as KMP algorithm. They are all base on <strong>Finite State Automata</strong>, which is really worth a try. Here I recommend <a href="http://www.amazon.com/Algorithms-4th-Robert-Sedgewick/dp/032157351X/ref=sr_1_1?ie=UTF8&amp;qid=1438428554&amp;sr=8-1&amp;keywords=algorithm" target="_blank" rel="external"><strong>Algorithm (the 4th Edition)</strong></a>, in this book, the author give a very detail introduction of <strong>StateMachine</strong> in chapter 5.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>The hardest problem in leetcode, and it force me to read something new, maybe this is why we solve the problem in the online judge system]]>
    </summary>
    
      <category term="Finite State Automata" scheme="tyleryang.github.io/tags/Finite-State-Automata/"/>
    
      <category term="Leetcode" scheme="tyleryang.github.io/tags/Leetcode/"/>
    
      <category term="State Machine" scheme="tyleryang.github.io/tags/State-Machine/"/>
    
      <category term="Interview" scheme="tyleryang.github.io/categories/Interview/"/>
    
      <category term="Leetcode" scheme="tyleryang.github.io/categories/Interview/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Palindrome PartitioningII - Leetcode]]></title>
    <link href="tyleryang.github.io/2015/08/01/Palindrome-PartionningII-Leetcode/"/>
    <id>tyleryang.github.io/2015/08/01/Palindrome-PartionningII-Leetcode/</id>
    <published>2015-07-31T16:09:13.000Z</published>
    <updated>2015-08-01T08:22:40.000Z</updated>
    <content type="html"><![CDATA[<p>This should be one of the most insteresting algorithm problem I try to solve within this month.</p>
<p>Here is the question,</p>
<h3 id="Palindrome_PartitioningII">Palindrome PartitioningII</h3><blockquote>
<p>Given a string s, partition s such that every substring of the partition is a palindrome.<br>Return the minimum cuts needs for a palindrome partitioning of s.</p>
<p>For example, given s = “aab”,<br>Return <code>1</code> since the palindrome partitioning <code>[&quot;aa&quot;, &quot;b&quot;]</code> could be produced using 1 cut.</p>
</blockquote>
<h3 id="Analysis">Analysis</h3><p>To get the minimum cut, of course backtracking can get an answer. To do it in a better way, <strong>Dynamic Programming</strong> will be suit for us.</p>
<p>Let’s say, we want to know the minimum cut for string <code>s = &quot;aabaabcb&quot;</code>,<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 1 2 3 4 5 6 7&#10;a a b a a c b c</span><br></pre></td></tr></table></figure></p>
<p>Apparently, we need to find out all the palindrome substring in it so that we can get the minimum cut. But we can reuse some part of the substring. For example, if we know <code>aba</code> is a palindrome, to valid <code>aabaa</code> we only need to make sure the first character equals to the last one.<br>So the first step is to find out all the substring which is palindrome.<br>We use 2 dimension array to store all the result. For String <code>s = &quot;aabaabcb&quot;</code>, substring s.substring(1, 3) is a palindrome, so we set <code>dp[1][3] = true</code>, here is the java code.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length()][s.length()];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = s.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; s.length(); j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s.charAt(j) == s.charAt(i) &amp;&amp; (j - i &lt; <span class="number">2</span> || dp[i + <span class="number">1</span>][j - <span class="number">1</span>] == <span class="keyword">true</span>)) dp[i][j] = <span class="keyword">true</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>after run this code, we get a two dimension array below,<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 1 0 0 1 0 0 0&#10;0 1 0 1 0 0 0 0&#10;0 0 1 0 0 0 0 0&#10;0 0 0 1 1 0 0 0&#10;0 0 0 0 1 0 0 0&#10;0 0 0 0 0 1 0 1&#10;0 0 0 0 0 0 1 0&#10;0 0 0 0 0 0 0 1</span><br></pre></td></tr></table></figure></p>
<p>Actually it is easy to get this 2d array, the trick is in the next step.<br>To get the minimum cut from it, we need to compare different combinations, e.g for string <code>abaacbc</code> the minimun cut should be one of the combinations below,<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subStr.length() - 1&#10;1 + minCut(&#34;baacbc&#34;) //a is palindrome&#10;1 + minCut(&#34;acbc&#34;)   //aba is palindrome</span><br></pre></td></tr></table></figure></p>
<p>A navie idea is code it up with simply recursive call. Can we do it better? To get the min cut of <code>abaacbc</code>, we need to know the min cut of <code>baacbc</code> and <code>acbc</code>. Then we know this is another <strong>Dynamic Programming</strong> solution. In another word, to solve this problem, we need to use <strong>Dynamic Programming</strong> two times.</p>
<p>Let’s create an one-dimension array, <code>minCut</code>, each element stands for min cut of s.substring(i)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] minCut = <span class="keyword">new</span> <span class="keyword">int</span>[s.length() + <span class="number">1</span>]; <span class="comment">//last should be ""</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; minCut.length; i++) &#123;</span><br><span class="line">    minCut[i] = minCut.length - i - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[7 6 5 4 3 2 1 0 -1]</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = s.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; s.length(); j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(dp[i][j] == <span class="keyword">true</span>) &#123;</span><br><span class="line">            minCut[i] = Math.min(minCut[i], <span class="number">1</span> + minCut[j + <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> minCut[<span class="number">0</span>];</span><br></pre></td></tr></table></figure></p>
<h3 id="Conclusion">Conclusion</h3><p>The interesting part of this problem is we need to use DP two times. During our processes, we should know which part we can improve. <a href="https://github.com/TylerYang/leetcode/blob/master/132.PalindromePartitioningII/Solution.java" target="_blank" rel="external">Here is the java code.</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This should be one of the most insteresting algorithm problem I try to solve within this month.</p>
<p>Here is the question,</p>
<h3 id="]]>
    </summary>
    
      <category term="Dynamic Programming" scheme="tyleryang.github.io/tags/Dynamic-Programming/"/>
    
      <category term="Leetcode" scheme="tyleryang.github.io/tags/Leetcode/"/>
    
      <category term="Interview" scheme="tyleryang.github.io/categories/Interview/"/>
    
      <category term="Leetcode" scheme="tyleryang.github.io/categories/Interview/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Reverse Hash Function - Google Challenge]]></title>
    <link href="tyleryang.github.io/2015/07/25/Reverse-Hash-Function-Google-Challenge/"/>
    <id>tyleryang.github.io/2015/07/25/Reverse-Hash-Function-Google-Challenge/</id>
    <published>2015-07-25T08:01:42.000Z</published>
    <updated>2015-08-01T12:50:10.000Z</updated>
    <content type="html"><![CDATA[<p>Recently I’ve been doing the Google Challenge, and I found a very interesting algorithm problem. Here is the problem.</p>
<h3 id="Reverse_a_Hash_Function_(Level_3)">Reverse a Hash Function (Level 3)</h3><p>The function takes a 16 byte input and gives a 16 byte output. It uses multiplication (*), bit-wise exclusive OR (XOR) and modulo (%) to calculate an element of the digest based on elements of the input message: </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">digest [i] = ( (<span class="number">129</span> * message[i]) XOR message[i-<span class="number">1</span>]) % <span class="number">256</span></span><br></pre></td></tr></table></figure>
<p>For the first element, the value of <code>message[-1]</code> is 0.<br>For example, if <code>message[0] = 1</code> and <code>message[1] = 129</code>, then:<br>For <code>digest[0]</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">129</span> * message[<span class="number">0</span>] = <span class="number">129</span></span><br><span class="line"><span class="number">129</span> XOR message[-<span class="number">1</span>] = <span class="number">129</span></span><br><span class="line"><span class="number">129</span> % <span class="number">256</span> = <span class="number">129</span></span><br></pre></td></tr></table></figure></p>
<p>Thus <code>digest[0] = 129</code>.<br>For digest[1]:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">129</span>*message[<span class="number">1</span>] = <span class="number">16641</span></span><br><span class="line"><span class="number">16641</span> XOR message[<span class="number">0</span>] = <span class="number">16640</span></span><br><span class="line"><span class="number">16640</span> % <span class="number">256</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure></p>
<p>Thus <code>digest[1] = 0</code>.<br>Write a function answer(digest) that takes <strong>an array of 16 integers</strong> and returns another array of 16 that correspond to the unique message that created this digest. Since each value is a single byte, the values are <strong>0 to 255</strong> for both message and digest.</p>
<h3 id="Test_cases">Test cases</h3><p>Inputs:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">int</span> list) digest = [<span class="number">0</span>, <span class="number">129</span>, <span class="number">3</span>, <span class="number">129</span>, <span class="number">7</span>, <span class="number">129</span>, <span class="number">3</span>, <span class="number">129</span>, <span class="number">15</span>, <span class="number">129</span>, <span class="number">3</span>, <span class="number">129</span>, <span class="number">7</span>, <span class="number">129</span>, <span class="number">3</span>, <span class="number">129</span>]</span><br></pre></td></tr></table></figure></p>
<p>Output:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">int</span> list) [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]</span><br></pre></td></tr></table></figure></p>
<p>Inputs:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">int</span> list) digest = [<span class="number">0</span>, <span class="number">129</span>, <span class="number">5</span>, <span class="number">141</span>, <span class="number">25</span>, <span class="number">137</span>, <span class="number">61</span>, <span class="number">149</span>, <span class="number">113</span>, <span class="number">145</span>, <span class="number">53</span>, <span class="number">157</span>, <span class="number">233</span>, <span class="number">185</span>, <span class="number">109</span>, <span class="number">165</span>]</span><br></pre></td></tr></table></figure></p>
<p>Output:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">int</span> list) [<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>, <span class="number">121</span>, <span class="number">144</span>, <span class="number">169</span>, <span class="number">196</span>, <span class="number">225</span>]</span><br></pre></td></tr></table></figure></p>
<h3 id="Analysis">Analysis</h3><p>Basically this problem is about how to reverse this expression,<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">digest [i] = ( (<span class="number">129</span> * message[i]) XOR message[i-<span class="number">1</span>]) % <span class="number">256</span></span><br></pre></td></tr></table></figure></p>
<p>The first moment I saw this problem, I was wondering maybe I can just simply move the modulo operator(%) to the right side, and then the <code>XOR</code> operator. For <code>129 * message[i]</code>, maybe I can use the forloop to find out the right one.</p>
<p>For <code>% 256</code> we know it is only set a upperbound to our hash result, XOR <code>message[i - 1]</code> will not affect the result of modulo(message[i - 1] is in the interleaving [0, 255]). which means<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">digest[i] = ((129 * message[i]) XOR message[i - 1]) % 256&#10;          = ((129 * message[i]) % 256) XOR message[i - 1]</span><br></pre></td></tr></table></figure></p>
<p>Considering the expression below,<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a ^ b = c;</span><br><span class="line">c ^ b = a;</span><br><span class="line">c ^ a = b;</span><br></pre></td></tr></table></figure></p>
<p>Appearently we know this will happen, if you want the approvement, <a href="/2015/07/25/About-XOR-operator/">here is another post about this.</a></p>
<p>We know the value of <code>digest[i]</code> and <code>message[i - 1]</code>, so we get the expression below,<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">digest[i] = ((129 * message[i]) % 256) XOR message[i - 1]&#10;digest[i] XOR message[i - 1] = (129 * message[i]) % 256</span><br></pre></td></tr></table></figure></p>
<p>Now the question become for x in [0, 255], y in [0, 255]</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(129 * x) % 256 = y //we know what is y (digest[i] ^ message[i - 1])</span><br></pre></td></tr></table></figure>
<p><strong><strong> What is x ? </strong></strong><br>We don’t know it yet. Let us clear our mind and run these code in your chrome web developer tool.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> x = <span class="number">0</span>; x &lt;= <span class="number">255</span>; x++) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"x:"</span> + x + <span class="string">", result: "</span> + (<span class="number">129</span> * x % <span class="number">256</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>From the result, we will see in some number when we run this expression,<br><code>129 * x % 256</code> it will equals to x. To be more clearly, let us run the javascript code into chrome dvp tool one more time.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> x = <span class="number">0</span>; x &lt;= <span class="number">255</span>; x += <span class="number">2</span>) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"x:"</span> + x + <span class="string">", result: "</span> + <span class="number">129</span> * x % <span class="number">256</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> x = <span class="number">1</span>; x &lt;= <span class="number">255</span>; x += <span class="number">2</span>) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"x:"</span> + x + <span class="string">", result: "</span> + <span class="number">129</span> * x % <span class="number">256</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Now we know that when the <code>x</code> is <strong><strong>EVEN</strong></strong>, <code>129 * x % 256</code> will equals to <code>x</code>. When <code>x</code> is <strong><strong>ODD</strong></strong> the result start from 129 until it reach 255, then it start from 1.</p>
<p>A very interesting fact about this express is, <code>129</code> and <code>256</code> are very insteresting numbers, <code>129 == 256 / 2 + 1</code>, Which means per two 129 we will get 258 and after mod 256 we only get <code>2</code>. when x is <strong><strong>EVEN</strong></strong>, let’s say x is <code>4</code>,<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">129 * 4 % 256 = (129 * 2 + 129 * 2) % 256&#10;              = (256 + 2 + 256 + 2) % 256&#10;              = 4</span><br></pre></td></tr></table></figure></p>
<p>This is why when <code>x</code> is <strong><strong>EVEN</strong></strong> the result is equals to itself.</p>
<p>Then how about <code>x</code> is <strong><strong>ODD</strong></strong>? Assumming <code>x</code> is 5, we can get the result below,<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">129 * 5 % 256 = (129 * 2 + 129 * 2 + 129) % 256&#10;              = (256 + 2 + 256 + 2 + 129) % 256&#10;              = 4 + 129 &#10;              = 5 + 128</span><br></pre></td></tr></table></figure></p>
<p>For <strong><strong>ODD</strong></strong> <code>x</code>, one thing we need to consider is, if <code>x</code> is larger than 128, this expression will smaller than 128, let’s say <code>x</code> is 131<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">129 * 131 % 256 = (129 * 128 + 129 * 3) % 256&#10;                = (128 * 128 + 128 + 256 + 2 + 129) % 256&#10;                = (128 + 129 + 2) % 256&#10;                = (256 + 3) % 256&#10;                = 3</span><br></pre></td></tr></table></figure></p>
<p>For now we can write down our pseudo code blow,<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(digest[i] XOR message[i - 1] is EVEN) &#123;&#10;&#9;//message[i] is EVEN&#10;&#9;message[i] = digest[i] ^ message[i - 1]&#10;&#125; else &#123;&#10;&#9;//message[i] is ODD&#10;&#9;if(digest[i] &#62; 128) &#123;&#10;&#9;&#9;if(message[i - 1] &#62; 128) &#123;&#10;&#9;&#9;&#9;// 129 * message[i] % 256 &#60; 128&#10;&#9;&#9;&#9;// message[i] &#62; 128&#10;&#9;&#9;&#9;message[i] += 128;&#10;&#9;&#9;&#125; else &#123;&#10;&#9;&#9;&#9;// 129 * message[i] % 256 &#62; 128&#10;&#9;&#9;&#9;// message[i] &#60; 128&#10;&#9;&#9;&#9;message[i] -= 128;&#10;&#9;&#9;&#125;&#10;&#9;&#125; else &#123;&#10;&#9;&#9;if(message[i - 1] &#62; 128) &#123;&#10;&#9;&#9;&#9;// 129 * message[i] % 256 &#62; 128&#10;&#9;&#9;&#9;// message[i] &#60; 128&#10;&#9;&#9;&#9;message[i] += 128;&#10;&#9;&#9;&#125; else &#123;&#10;&#9;&#9;&#9;// 129 * message[i] % 256 &#60; 128&#10;&#9;&#9;&#9;// message[i] &#62; 128&#10;&#9;&#9;&#9;message[i] -= 128;&#10;&#9;&#9;&#125;&#10;&#9;&#125;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>Here is Java Code,<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] reverseHash(<span class="keyword">int</span>[] digest) &#123;</span><br><span class="line">        <span class="keyword">int</span> prevM = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] message = <span class="keyword">new</span> <span class="keyword">int</span>[digest.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; digest.length; i++) &#123;</span><br><span class="line">            message[i] = tmp;</span><br><span class="line">            <span class="keyword">if</span>(tmp % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(digest[i] &gt; <span class="number">128</span>) &#123;</span><br><span class="line">                    message[i] += message[i - <span class="number">1</span>] &gt; <span class="number">128</span> ? <span class="number">128</span> : -<span class="number">128</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    message[i] += message[i - <span class="number">1</span>] &gt; <span class="number">128</span> ? <span class="number">128</span> : -<span class="number">128</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//corner case  e.g[1,1,1,1,1,1,1,1,1,1,1...];</span></span><br><span class="line">                message[i] = (message[i] + <span class="number">256</span>) % <span class="number">256</span>; </span><br><span class="line">            &#125; </span><br><span class="line">            prevM = message[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Conclusion">Conclusion</h3><p>Personally, I think this problem really worth a try. It’s about some specify algorithm(e.g Dynamic Programming, Greedy Algorithm). This problem is only about the basic bit manipulation and some math stuff. At least, this problem tell me, it’s time to read the csapp one more time. : )</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Recently I’ve been doing the Google Challenge, and I found a very interesting algorithm problem. Here is the problem.</p>
<h3 id="Reverse]]>
    </summary>
    
      <category term="Algorithm" scheme="tyleryang.github.io/tags/Algorithm/"/>
    
      <category term="Google Challenge" scheme="tyleryang.github.io/tags/Google-Challenge/"/>
    
      <category term="Interview" scheme="tyleryang.github.io/categories/Interview/"/>
    
      <category term="Google Chanllenge" scheme="tyleryang.github.io/categories/Interview/Google-Chanllenge/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[About XOR operator]]></title>
    <link href="tyleryang.github.io/2015/07/25/About-XOR-operator/"/>
    <id>tyleryang.github.io/2015/07/25/About-XOR-operator/</id>
    <published>2015-07-25T06:15:16.000Z</published>
    <updated>2015-07-25T06:17:17.000Z</updated>
    <content type="html"><![CDATA[<p>I think the chrome web developer tool is very useful, I perfer to use it to validate some expression or some api instead of using java compiler or c compiler. Considering the expression below.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">129</span>;</span><br><span class="line"><span class="keyword">var</span> c = a ^ b;</span><br><span class="line">a ^ b;  <span class="comment">// 132</span></span><br><span class="line">b ^ c;  <span class="comment">// 5 equals to a</span></span><br></pre></td></tr></table></figure>
<p>Let me prove this is right. The binary expression of integer 5 is, <code>101</code><br>for 129 is, <code>100000001</code></p>
<p>XOR means with the same bit value you will get <code>0</code>, and vise versa.<br>So when we do <code>a ^ b</code> means we will get the bit which only exist in <code>a</code> or <code>b</code>.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span> <span class="number">7</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span>  <span class="comment">//a</span></span><br><span class="line">              XOR</span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>  <span class="comment">//b</span></span><br><span class="line">-----------------</span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span>  <span class="comment">//c  bits only exist in a or b</span></span><br></pre></td></tr></table></figure></p>
<p>So <code>b ^ c</code> means you will get the bit only exist in b or c.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span> <span class="number">7</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="comment">//b</span></span><br><span class="line">              XOR</span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="comment">//c</span></span><br><span class="line">-----------------</span><br></pre></td></tr></table></figure></p>
<p>Appearently when we  <code>a ^ b</code>, their public bits are all set to <code>0</code>(The 0th) and the bits only exist in b or a is already save into the c(The 2th from a and the 8th from b). So At this moment <code>b ^ c</code> will equal to ‘bits only exist in a and bits exist in both <code>a</code> and <code>b</code> which is <code>a</code>‘(The 0th from <code>a</code> and the 2th from <code>b</code>). </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>I think the chrome web developer tool is very useful, I perfer to use it to validate some expression or some api instead of using java co]]>
    </summary>
    
      <category term="CSAPP" scheme="tyleryang.github.io/tags/CSAPP/"/>
    
  </entry>
  
</feed>